; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
[XComGame.XComGameState_AIPlayerData]
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
-MaxEngagedEnemies[0] = 4   ; Rookie
-MaxEngagedEnemies[1] = 6   ; Veteran
-MaxEngagedEnemies[2] = 6   ; Commander
-MaxEngagedEnemies[3] = 99  ; Legend

; Never seen XC:CS use this, but just in case. (In-case legacy from XCOM 2 is used)
+MaxEngagedEnemies[0] = 99
+MaxEngagedEnemies[1] = 99
+MaxEngagedEnemies[2] = 99
+MaxEngagedEnemies[3] = 99

; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
[XComGame.XGAIPlayer]
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
-LastResortTargetEffects=(EffectName="Bind")
-LastResortTargetEffects=(EffectName="Panicked")
-LastResortTargetEffects=(EffectName="Berserk")
; Below not used in DIO, just in case.
-LastResortTargetEffects=(EffectName="Dazed")
-LastResortTargetEffects=(EffectName="Obsessed")
-LastResortTargetEffects=(EffectName="Shattered")

; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
[XComGame.XGAIBehavior]
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
-DefaultIdealRange=10.0f
+DefaultIdealRange=7.0f

+AoEProfiles=( Profile=ProgenyGrenadeManyProfile, Ability=ThrowGrenade, bUsePrecomputePath=true, MinTargets=3, bRequirePotentialTarget=true, bTargetAllies=false, bTargetSelf=false, bTargetCivilians=false, bFailOnFriendlyFire=true, bFailOnObjectiveFire=false, bIgnoreSelfDamage=false, bRequireLoS=true)
+AoEProfiles=( Profile=ProgenyGrenadeFewProfile, Ability=ThrowGrenade, bUsePrecomputePath=true, MinTargets=2, bRequirePotentialTarget=true, bTargetAllies=false, bTargetSelf=false, bTargetCivilians=false, bFailOnFriendlyFire=true, bFailOnObjectiveFire=false, bIgnoreSelfDamage=false, bRequireLoS=true)

-AoEProfiles=( Profile=BlazingPinionsProfile, Ability=BlazingPinionsStage1, MinTargets=3, bFailOnObjectiveFire=False)
+AoEProfiles=( Profile=BlazingPinionsProfile, Ability=BlazingPinionsStage1, MinTargets=3, bRequireLoS=true, bFailOnObjectiveFire=False)

+AoEProfiles=( Profile=GPGrenadeManyProfile, Ability=ThrowGrenade, bUsePrecomputePath=true, MinTargets=3, bRequirePotentialTarget=true, bTargetAllies=false, bTargetSelf=false, bTargetCivilians=false, bFailOnFriendlyFire=true, bFailOnObjectiveFire=true, bIgnoreSelfDamage=false, bRequireLoS=true)
+AoEProfiles=( Profile=GPGrenadeFewProfile, Ability=ThrowGrenade, bUsePrecomputePath=true, MinTargets=2, bRequirePotentialTarget=true, bTargetAllies=false, bTargetSelf=false, bTargetCivilians=false, bFailOnFriendlyFire=true, bFailOnObjectiveFire=true, bIgnoreSelfDamage=false, bRequireLoS=true)

-m_arrMoveWeightProfile=(Profile=MWP_Fallback, fCoverWeight=3.0f, fDistanceWeight=0.0f, fFlankingWeight=0.0f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=1.0f, fCloseModifier=0.9f, fFarModifier=1.1f) 
+m_arrMoveWeightProfile=(Profile=MWP_Fallback, fCoverWeight=4.0f, fDistanceWeight=1.0f, fFlankingWeight=-1.0f, fEnemyVisWeight=-0.5f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=2.0f, fHeightWeight=0.5f, fCloseModifier=0.7f, fFarModifier=1.3f, MinimumTileDist=4.0f)

-AoEProfiles=( Profile=MicroMissilesProfile, bUsePrecomputePath=1, Ability=MicroMissiles)
-AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, MinTargets=1)

+AoEProfiles=( Profile=MicroMissilesProfile,    bUsePrecomputePath=1, Ability=MicroMissiles, bFailOnFriendlyFire=true, bRequireLoS=true, MinTargets=2)
+AoEProfiles=( Profile=MicroMissilesProfileMk2, bUsePrecomputePath=1, Ability=MicroMissiles, bFailOnFriendlyFire=true, bRequireLoS=true, MinTargets=2)

-AoEProfiles=( Profile=KillZoneOverwatchProfile, Ability=KillZoneOverwatch, MinTargets=1, bIgnoreCollisionCheck=1 )
+AoEProfiles=( Profile=KillZoneOverwatchProfile, Ability=KillZoneOverwatch, bTargetEnemy=true, bIgnoreSelfDamage=true, MinTargets=1, bIgnoreRepeatAttackList=true, bIgnoreCollisionCheck=true, bRequireLoS=true )

; I dont think DIO uses this, just in case.
-CURR_TILE_LINGER_PENALTY=0.75;  Multiplier on current location distance score to lower the value of the current tile and promote movement.
+CURR_TILE_LINGER_PENALTY=0.90;  Multiplier on current location distance score to lower the value of the current tile and promote movement.

; Units will strongly prefer full cover.
-CALC_NO_COVER_FACTOR=-4.0f ; Used in weighting each cover location.  One location can have different cover values
-CALC_MID_COVER_FACTOR=1.0f ; depending on multiple enemy positions around that location.  On one side it can have full
-CALC_FULL_COVER_FACTOR=1.1f ; cover to one enemy, another side can have no cover.  CoverScore= avg of all cover values per known enemy.
-CALC_FULL_COVER_FACTOR_POD_LEADER=2.5f;  Leaders of groups will prioritize full cover to a greater degree.

+CALC_NO_COVER_FACTOR=-4.0f
+CALC_MID_COVER_FACTOR=1.0f
+CALC_FULL_COVER_FACTOR=1.5f
+CALC_FULL_COVER_FACTOR_POD_LEADER=2.0f

-DEFAULT_AI_MIN_SPREAD_DISTANCE=6.0f   ; default distance (meters) from teammates to prefer to stay away.  Should be about double an AoE radius.
; DIO is played closer, tighter.
+DEFAULT_AI_MIN_SPREAD_DISTANCE=3.0f
-DEFAULT_AI_SPREAD_WEIGHT_MULTIPLIER=0.2f ;destination scores get multiplied by this value for tile locations adjacent to teammates.
+DEFAULT_AI_SPREAD_WEIGHT_MULTIPLIER=0.7f

; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
[XComGame.X2AIBTBehaviorTree]
+Behaviors=(BehaviorName=IsAbilityAvailable-MedikitHeal, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-MedikitHeal, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-MedikitHeal, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-MedikitHeal, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-MedikitHeal, NodeType=Action)
+Behaviors=(BehaviorName=TargetIsNotRobotic, NodeType=Inverter, Child[0]=TargetIsRobotic)

; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
; *****************************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=ConsiderTakingOverwatch, Child[1]=ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=TryShootOrReloadOrOverwatch, NodeType=Selector, Child[0]=NeedsReload, Child[1]=ShootFlankedIn8Tiles, Child[2]=ConsiderOverwatchIfSupported, Child[3]=ShootIfAvailable, Child[4]=TryAnyOverwatch)
+Behaviors=(BehaviorName=TryAnyOverwatchIfSupported25, NodeType=Sequence, Child[0]=ManyAlliesVisible, Child[1]=NotLowHP, Child[2]=NotEnragedCheck, Child[3]=NotInDangerousArea, Child[4]=NotSubservient, Child[5]=TryAnyOverwatch25)
+Behaviors=(BehaviorName=TryAnyOverwatchIfSupportedNoOverwatchers25, NodeType=Sequence, Child[0]=ManyAlliesVisible, Child[1]=NotLowHP, Child[2]=NotEnragedCheck, Child[3]=NoOverwatchingTeammates, Child[4]=NotInDangerousArea, Child[5]=NotSubservient, Child[6]=TryAnyOverwatch25)
+Behaviors=(BehaviorName=ConsiderOverwatchIfSupported, NodeType=Selector, Child[0]=TryAnyOverwatchIfSupportedNoOverwatchers25, Child[1]=TryAnyOverwatchIfSupported25)
+Behaviors=(BehaviorName=TryAnyOverwatch25, NodeType=RandFilter, Child[0]=TryAnyOverwatch, Param[0]=25)
+Behaviors=(BehaviorName=ManyAlliesVisible, NodeType=StatCondition, Param[0]=VisibleAllyCount, Param[1]=">", Param[2]=1)
+Behaviors=(BehaviorName=NotEnragedCheck, NodeType=Sequence, Child[0]=NotPanicked, Child[1]=NotMutonBerserked, Child[2]=NotBattleMaddened, Child[3]=NotFrenzied)

; AKA
+Behaviors=(BehaviorName=TryReloadOrOverwatchOrShoot, NodeType=Selector, Child[0]=TryShootOrReloadOrOverwatch)
+Behaviors=(BehaviorName=TryReloadOrShootOrOverwatch, NodeType=Selector, Child[0]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=TryShootOrReload, NodeType=Selector, Child[0]=ShootIfAvailable, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=TryShootOrReload, NodeType=Selector, Child[0]=NeedsReload, Child[1]=ShootFlankedIn8Tiles, Child[2]=ShootIfAvailable)
; AKA
+Behaviors=(BehaviorName=TryReloadOrShoot, NodeType=Selector, Child[0]=TryShootOrReload)

+Behaviors=(BehaviorName=NotBloodied, NodeType=Inverter, Child[0]=IsBloodied)

; Cone first, Radius second (also checks for the regular old visual Overwatch), Pistol last.
+Behaviors=(BehaviorName=TryAnyOverwatch, NodeType=Selector, Child[0]=TryKillZoneOverwatch, Child[1]=TryOverwatch, Child[2]=TryPistolOverwatch)
+Behaviors=(BehaviorName=TryAnyOverwatchOrCower, NodeType=Selector, Child[0]=TryAnyOverwatch, Child[1]=CowerIfNotFlanked)
+Behaviors=(BehaviorName=CowerIfNotFlanked, NodeType=Sequence, Child[0]=NotInDangerousArea, Child[1]=DoCower)

-Behaviors=(BehaviorName=ScoreVeryGood, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotBoundOrPanicked, Child[4]=TargetIsInRange-5, Child[5]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=ScoreVeryGood, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsEnemy, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotBoundOrPanicked, Child[4]=TargetIsInRange-12, Child[5]=GenericTargetEvaluations, Child[6]=TargetScoreByScaledDistance-1)
+Behaviors=(BehaviorName=ShootFlankedIn8Tiles, NodeType=Selector, Child[0]=ShootIfVeryGood)
+Behaviors=(BehaviorName=ShootFlankedIn8Tiles_50, NodeType=RandFilter, Child[0]=ShootFlankedIn8Tiles, Param[0]=50)
+Behaviors=(BehaviorName=TargetIsInRange-12, NodeType=Action, Param[0]="12")

; Make extra sure the unit has Ammo before doing this otherwise its pointless.
-Behaviors=(BehaviorName=TryOverwatch, NodeType=Sequence, Child[0]=IsAbilityAvailable-Overwatch, Child[1]=SelectAbility-Overwatch)
+Behaviors=(BehaviorName=TryOverwatch, NodeType=Sequence, Child[0]=HasAmmo, Child[1]=IsAbilityAvailable-Overwatch, Child[2]=SelectAbility-Overwatch)
-Behaviors=(BehaviorName=TryKillZoneOverwatch, NodeType=Sequence, Child[0]=IsAbilityAvailable-KillZoneOverwatch, Child[1]=FindPotentialAoETargets-KillZoneOverwatchProfile, Child[2]=SelectAoETarget-KillZoneOverwatchProfile, Child[3]=SelectAbility-KillZoneOverwatch)
+Behaviors=(BehaviorName=TryKillZoneOverwatch, NodeType=Sequence, Child[0]=HasAmmo, Child[1]=IsAbilityAvailable-KillZoneOverwatch, Child[2]=FindPotentialAoETargets-KillZoneOverwatchProfile, Child[3]=SelectAoETarget-KillZoneOverwatchProfile, Child[4]=SelectAbility-KillZoneOverwatch)

; Add Killable targets to scoring.
-Behaviors=(BehaviorName=GenericTargetEvaluations, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreHealth, Child[2]=TargetScoreFlanking, Child[3]=TargetScoreMarkedOrThreaten, Child[4]=ApplyDifficultyModifiers, Child[5]=TargetScoreCivilian, Child[6]=AvoidBoundAndPanickedTargets)
+Behaviors=(BehaviorName=GenericTargetEvaluations, NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=TargetScoreFlanking, Child[2]=TargetScoreHealth, Child[3]=TargetScoreKillable, Child[4]=TargetScoreMarkedOrThreaten, Child[5]=ApplyDifficultyModifiers, Child[6]=TargetScoreCivilian, Child[7]=AvoidBoundAndPanickedTargets)

+Behaviors=(BehaviorName=TargetScoreKillable, NodeType=Successor, Child[0]=ScoreIfTargetKillable)
+Behaviors=(BehaviorName=ScoreIfTargetKillable, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=AddToTargetScore_50)

-Behaviors=(BehaviorName=ScoreTargetIfMarked, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MarkedTarget, Child[1]=AddToTargetScore_45) ; bump a marked target up to the next aim tier with a bonus, over even a killshot
+Behaviors=(BehaviorName=ScoreTargetIfMarked, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MarkedTarget, Child[1]=AddToTargetScore_40)

-Behaviors=(BehaviorName=ScoreIfTargetWounded, NodeType=Sequence, Child[0]=TargetWounded, Child[1]=ScoreWoundedTargetByDifficulty)
+Behaviors=(BehaviorName=ScoreIfTargetWounded, NodeType=Sequence, Child[0]=TargetWounded, Child[1]=AddToTargetScore_20)

; Better handling of Forcing to go to Unflanked tiles and better Ally Checking.
-Behaviors=(BehaviorName=MoveAdvanceToCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestination-MWP_AdvanceCover, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=MoveAdvanceToCoverLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-MWP_AdvanceCover, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=MoveDefensiveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestination-MWP_Defensive, Child[3]=SelectAbility-StandardMove)

+Behaviors=(BehaviorName=MoveAdvanceToCoverUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindDestination-MWP_AdvanceCover, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveAdvanceToCoverLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=RestrictToAllyLoS, Child[4]=FindDestinationWithLoS-MWP_AdvanceCover, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=MoveDefensiveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindDestination-MWP_Defensive, Child[4]=SelectAbility-StandardMove)

-Behaviors=(BehaviorName=FallBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindBestFallbackDestination, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=FallBackWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-MWP_FallBack, Child[3]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=FindFriendlyFallbackDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAllyLoS, Child[2]=FindRestrictedDestination-MWP_FallBack)

+Behaviors=(BehaviorName=FallBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=FindBestFallbackDestination, Child[4]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FallBackWithLoSUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=RestrictToAllyLoS, Child[4]=FindDestinationWithLoS-MWP_FallBack, Child[5]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindFriendlyFallbackDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAllyLoS, Child[2]=RestrictToUnflanked, Child[3]=FindRestrictedDestination-MWP_FallBack)

; ******************************************************
; SCAMPER MECHANICS SUCKS. GIVE ENEMIES BACK SOME TEETH.
; ******************************************************

; OUT
; ******************************************************
-Behaviors=(BehaviorName=BreachScamperRoot_Generic, NodeType=Selector,       Child[0]=DoIfFlankedMove,     Child[1]=DoCower,       Child[2]=FallBackWithLoS,       Child[3]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Outlaw, NodeType=Selector, \\
		Child[0]=SuppressIfAvailable, \\
		Child[1]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Sentinel, NodeType=Selector, \\
		Child[0]=TryKillZoneOverwatch, \\
		Child[1]=SuppressIfAvailable, \\
		Child[2]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Sectoid_Dominator, NodeType=Selector, \\
		Child[0]=TryOverwatchOrCower)

-Behaviors=(BehaviorName=BreachScamperRoot_Sectoid_Resonant, NodeType=Selector, \\
		Child[0]=DoIfFlankedMove, \\
		Child[1]=TryPsiDomain, \\
		Child[2]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Acolyte, NodeType=Selector, \\
		Child[0]=DoCower, \\
		Child[1]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Thrall, NodeType=Selector, \\
		Child[0]=DoIfFlankedMove, \\
		Child[1]=TrySubservience, \\
		Child[2]=DoCower, \\
		Child[3]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Sorcerer, NodeType=Selector, \\
		Child[0]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Guardian, NodeType=Selector, \\
		Child[0]=TryEnergyShieldOnMultipleTargets, \\
		Child[1]=TryRiotGuard, \\
		Child[2]=DoIfFlankedMove)

-Behaviors=(BehaviorName=BreachScamperRoot_SacredCoilTurret, NodeType=Selector, \\
	Child[0]=TryTargetingSystem)

-Behaviors=(BehaviorName=BreachScamperRoot_Commando, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryCommandoThrowSmokeGrenade, \\
	Child[2]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Adder, NodeType=Selector, \\
	Child[0]=TryHasten, \\
	Child[1]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Sectoid_Necromancer, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryPsiReanimation, \\
	Child[2]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Muton_Enforcer, NodeType=Selector,       Child[0]=TryBladestormOverwatch,       Child[1]=SkipMove)   

-Behaviors=(BehaviorName=BreachScamperRoot_Muton_Praetorian, NodeType=Selector,       Child[0]=TryDuel,       Child[1]=SkipMove)

-Behaviors=(BehaviorName=BreachScamperRoot_Ronin, NodeType=Selector, \\
		Child[0]=TryBladestormOverwatch, \\
		Child[1]=DoCower)

-Behaviors=(BehaviorName=BreachScamperRoot_Chryssalid, NodeType=Selector, \\
		Child[0]=HuntEnemyWithCover, \\
		Child[1]=SkipMove)      

-Behaviors=(BehaviorName=BreachScamperRoot_Vanguard, NodeType=Selector, \\
		Child[0]=TryBladestormOverwatch, \\
		Child[1]=DoCower)      

; IN
; ******************************************************
; ImportText doesnt play nice with tabs, spaces and \\
; So just one line. Can't fail.
; This is the ALERT behavior.

; Android, Codex, Trooper, MEC, Bruiser, Hitman, Viper_Cobra, Legionnaire, Paladin, Python, Sorcerer are all generic.
; Dominator is buggy, well have to fix his template.
; CharTemplate.strBreachScamperBT = "BreachScamperRoot_Sectoid_Dominator";
; Purifier also needs to be fixed, he has no Root. Assigning the Generic Root.
+Behaviors=(BehaviorName=BreachScamperRoot_Generic, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=BreachScamperRoot_GenericTryAnAbility, Child[2]=TryAnyOverwatchOrCower, Child[3]=TryBladestormOverwatch, Child[4]=FallBackWithLoS, Child[5]=DoCower, Child[6]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_GenericTryAnAbility, NodeType=Selector, Child[0]=TryTriggerSelfDestruct, Child[1]=TryEngageSelfDestruct, Child[2]=TryTeleportDefensive, Child[3]=TryRiotGuard, Child[4]=TryHasten, Child[5]=TryPaladinShield, Child[6]=TryTyranny, Child[7]=TryPaladinMedikit, Child[8]=TryGatekeeperClose)
+Behaviors=(BehaviorName=BreachScamperRoot_Outlaw, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryAnyOverwatchOrCower, Child[2]=FallBackWithLoS, Child[3]=DoCower, Child[4]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Sentinel, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryAnyOverwatchOrCower, Child[2]=FallBackWithLoS, Child[3]=DoCower, Child[4]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Sectoid_Dominator, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryPsiDomain, Child[2]=TryAnyOverwatchOrCower, Child[3]=FallBackWithLoS, Child[4]=DoCower, Child[5]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Sectoid_Resonant, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryResonantSubservience, Child[2]=TrySoulSiphon, Child[3]=TryPsiDomain, Child[4]=TryAnyOverwatchOrCower, Child[5]=FallBackWithLoS, Child[6]=DoCower, Child[7]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Acolyte, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryPsiDomain, Child[2]=TryAnyOverwatchOrCower, Child[3]=FallBackWithLoS, Child[4]=DoCower, Child[5]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Sorcerer, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryAnyOverwatchOrCower, Child[2]=FallBackWithLoS, Child[3]=DoCower, Child[4]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Thrall, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TrySubservience, Child[2]=TryAnyOverwatchOrCower, Child[3]=DoCower, Child[4]=SkipMove)
; The Guardian can no longer shield everyone during Breach because it's not fair. Do it at your turn.
+Behaviors=(BehaviorName=BreachScamperRoot_Guardian, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryRiotGuard, Child[2]=TryAnyOverwatchOrCower, Child[3]=DoCower, Child[4]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_SacredCoilTurret, NodeType=Selector, Child[0]=NeedsReload, Child[1]=TryAnyOverwatchOrCower, Child[2]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Commando, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryCommandoThrowSmokeGrenade, Child[2]=TryAnyOverwatchOrCower, Child[3]=FallBackWithLoS, Child[4]=DoCower, Child[5]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Adder, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryHasten, Child[2]=TryAnyOverwatchOrCower, Child[3]=FallBackWithLoS, Child[4]=DoCower, Child[5]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Sectoid_Necromancer, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryPsiReanimation, Child[2]=FallBackWithLoS, Child[3]=DoCower, Child[4]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Muton_Praetorian, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryDuel, Child[2]=TryAnyOverwatchOrCower, Child[3]=DoCower, Child[4]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Muton_Enforcer, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryAnyOverwatchOrBladestorm, Child[2]=DoCower, Child[3]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Ronin, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=TryAnyOverwatch, Child[2]=TryBladestormOverwatch, Child[3]=DoCower, Child[4]=FallBackWithLoS, Child[5]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Chryssalid, NodeType=Selector, Child[0]=HuntEnemyWithCover, Child[1]=MoveRandomUnsafe, Child[2]=SkipMove)
+Behaviors=(BehaviorName=BreachScamperRoot_Vanguard, NodeType=Selector, Child[0]=BreachScamperRoot_Ronin)

; Always allow on Bound or Panicked.
-Behaviors=(BehaviorName=TargetNotBoundOrPanicked, NodeType=Inverter, Child[0]=IsLastResortTarget)
+Behaviors=(BehaviorName=TargetNotBoundOrPanicked, NodeType=Successor, Child[0]=IsLastResortTarget)

; *****************************************************************************************************************************************************************************************************************
; Mind Controlled Root Change (massive upgrade)
; *****************************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=MindControlledRoot, NodeType=Selector, \\
	Child[0]=MimicBeaconBehavior, \\
	Child[1]=MindControlledMove, \\
	Child[2]=MCTryGrenadeOption, \\
	Child[3]=GenericAbilityRoot, \\
	Child[4]=TryStandardMeleeUnsafe, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=NeedsReload, \\
	Child[7]=TryOverwatch, \\
	Child[8]=SkipMove)

+Behaviors=(BehaviorName=MindControlledRoot, NodeType=Selector, Child[0]=MindControlled_RedAlert, Child[1]=GenericAlertHandler)
+Behaviors=(BehaviorName=MindControlled_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=MindControlled_RedAbilitySelector)
+Behaviors=(BehaviorName=MindControlled_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MindControlled_RedFirstAction, Child[2]=MindControlled_RedLastAction)
+Behaviors=(BehaviorName=MindControlled_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MindControlled_RedFirstActionSelector)
+Behaviors=(BehaviorName=MindControlled_RedFirstActionSelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MCTryGrenadeOption, Child[2]=StandardMeleeAttack, Child[3]=NeedsReload, Child[4]=ShootFlankedIn8Tiles, Child[5]=GenericAbilityRoot50, Child[6]=TryStandardMeleeUnsafe, Child[7]=MindControlledMove, Child[8]=TryShootOrReload, Child[9]=TryAnyOverwatch, Child[10]=SkipMove)
+Behaviors=(BehaviorName=MindControlled_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=MindControlled_RedLastActionSelector)
+Behaviors=(BehaviorName=MindControlled_RedLastActionSelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=MCTryGrenadeOption, Child[2]=StandardMeleeAttack, Child[3]=NeedsReload, Child[4]=ShootFlankedIn8Tiles, Child[5]=GenericAbilityRoot, Child[6]=TryStandardMeleeUnsafe, Child[7]=TryShootOrReload, Child[8]=TryAnyOverwatch, Child[9]=MindControlledMove, Child[10]=HuntEnemyUnsafe)

+Behaviors=(BehaviorName=GenericAbilityRoot50, NodeType=RandFilter, Child[0]=GenericAbilityRoot, Param[0]=50)

; Massively prefer wounded targets as difficulty increases.
-Behaviors=(BehaviorName=Wounded_EasyDifficulty, NodeType=Sequence, Child[0]=IsDifficultyEasy, Child[1]=AddToTargetScore_0)
-Behaviors=(BehaviorName=Wounded_NormalDifficulty, NodeType=Sequence, Child[0]=IsDifficultyNormal, Child[1]=AddToTargetScore_10)
-Behaviors=(BehaviorName=Wounded_HardDifficulty, NodeType=Sequence, Child[0]=IsDifficultyHard, Child[1]=AddToTargetScore_15)
-Behaviors=(BehaviorName=Wounded_ClassicDifficulty, NodeType=Sequence, Child[0]=IsDifficultyClassic, Child[1]=AddToTargetScore_30)

+Behaviors=(BehaviorName=Wounded_EasyDifficulty, NodeType=Sequence, Child[0]=IsDifficultyEasy, Child[1]=AddToTargetScore_15)
+Behaviors=(BehaviorName=Wounded_NormalDifficulty, NodeType=Sequence, Child[0]=IsDifficultyNormal, Child[1]=AddToTargetScore_20)
+Behaviors=(BehaviorName=Wounded_HardDifficulty, NodeType=Sequence, Child[0]=IsDifficultyHard, Child[1]=AddToTargetScore_25)
+Behaviors=(BehaviorName=Wounded_ClassicDifficulty, NodeType=Sequence, Child[0]=IsDifficultyClassic, Child[1]=AddToTargetScore_30)

+Behaviors=(BehaviorName=NotFirstCombatTurn, NodeType=Inverter, Child[0]=IsInFirstCombatTurn)
; Disable preference to fire on not acted yet.
; Disable aggressive actions for freshly spawned units. Everyone checks difficulty, so this is where it's going down.
-Behaviors=(BehaviorName=ApplyDifficultyModifiersBase, NodeType=Sequence, Child[0]=TargetScoreHasActed, Child[1]=IsDifficultyLow, Child[2]="::DistributeAttacks")
+Behaviors=(BehaviorName=ApplyDifficultyModifiersBase, NodeType=Sequence, Child[0]=SSUnitHasJustSpawned, Child[1]=IsDifficultyLow, Child[2]="::DistributeAttacks")
+Behaviors=(BehaviorName=SSUnitHasJustSpawned, NodeType=Successor, Child[0]=UnitHasJustSpawnedScore)
+Behaviors=(BehaviorName=UnitHasJustSpawnedScore, NodeType=Sequence, Child[0]=SpawnedReinforcementsScore, Child[1]=AddToTargetScore_-1000)
; This detects if the unit is a Reinforcement or this is just the first turn.
+Behaviors=(BehaviorName=SpawnedReinforcementsScore, NodeType=Sequence, Child[0]=NotFirstCombatTurn, Child[1]=JustSpawnedThisTurn)

; Buggy of course, the icon still shows up and they skip their turn.
;-Behaviors=(BehaviorName=TryJobFleeToNextRoom,  NodeType=Sequence, Child[0]=IsMyJob-FleeToNextRoom, Child[1]=JobRoot_FleeToNextRoom)
;+Behaviors=(BehaviorName=TryJobFleeToNextRoom,  NodeType=Sequence, Child[0]=IsMyJob-FleeToNextRoom, Child[1]=NotFirstCombatTurn, Child[2]=JobRoot_FleeToNextRoom)

; *****************************************************************************************************************************************************************************************************************
; NEW PANIC/BERSERK
; *****************************************************************************************************************************************************************************************************************
-Behaviors=(BehaviorName=ScoreVeryGoodAlly, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsAlly, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotBoundOrPanicked, Child[4]=TargetIsInRange-8, Child[5]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=ScoreVeryGoodAlly, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsAlly, Child[2]=TargetIsNotCivilian, Child[3]=TargetNotBoundOrPanicked, Child[4]=TargetIsInRange-8, Child[5]=GenericTargetEvaluations, Child[6]=TargetScoreByScaledDistance-1)

-Behaviors=(BehaviorName=ScoreTeammateTargetRandomly, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetIsNotCivilian, Child[2]=GenericScoreTargetRandomlySequence)
+Behaviors=(BehaviorName=ScoreTeammateTargetRandomly, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetIsNotCivilian, Child[2]=GenericScoreTargetRandomlySequence, Child[3]=TargetScoreByScaledDistance-1)

+Behaviors=(BehaviorName=AffectedByEffect-Berserk, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-MutonRageBerserk, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-FrenzyEffect, NodeType=Condition)

+Behaviors=(BehaviorName=NotPanicked, NodeType=Inverter, Child[0]=AffectedByEffect-Panicked)
+Behaviors=(BehaviorName=NotMutonBerserked, NodeType=Inverter, Child[0]=AffectedByEffect-MutonRageBerserk)
+Behaviors=(BehaviorName=NotBattleMaddened, NodeType=Inverter, Child[0]=AffectedByEffect-Berserk)

+Behaviors=(BehaviorName=CheckReloadConditions, NodeType=Sequence, Child[0]=NotPanicked, Child[1]=NotMutonBerserked, Child[2]=NotBattleMaddened, Child[3]=NotFrenzied)

; DO NOT RELOAD IF PANICKED NORMALLY.
-Behaviors=(BehaviorName=NeedsReload, NodeType=Sequence, Child[0]=IsAbilityAvailable-Reload, Child[1]=OutOfAmmo, Child[2]=SelectAbility-Reload)
+Behaviors=(BehaviorName=NeedsReload, NodeType=Sequence, Child[0]=IsAbilityAvailable-Reload, Child[1]=OutOfAmmo, Child[2]=CheckReloadConditions, Child[3]=SelectAbility-Reload)
+Behaviors=(BehaviorName=BerserkNeedsReload, NodeType=Sequence, Child[0]=IsAbilityAvailable-Reload, Child[1]=OutOfAmmo, Child[2]=NotLastActionPoint, Child[3]=SelectAbility-Reload)

; This ability will be changed to something else as it is to buggy. 1 turn mind control with immediate action?
-Behaviors=(BehaviorName=PanicBerserkRoot, NodeType=Selector, Child[0]=ShootRandomEnemyForPanic, Child[1]=NeedsReload, Child[2]=TryMeleeEnemyForPanicBerserk, Child[3]=TryFlameThrowerAlly, Child[4]=PanickedMove, Child[5]=SkipMove)
+Behaviors=(BehaviorName=PanicBerserkRoot, NodeType=Selector, Child[0]=TryMeleeEnemyForPanicBerserk, Child[1]=ShootRandomEnemyForPanic, Child[2]=TryFlameThrowerAlly, Child[3]=TryFlameThrower, Child[4]=ShootRandomTargetForPanicBerserk, Child[5]=TryPanickedGrenadeToss)

; Reduce the need for the AI to fire on allies that are mind controlled.
-Behaviors=(BehaviorName=AISpecificModifiers, NodeType=Sequence, Child[0]=IsTeam-eTeam_Alien, Child[1]=IsTargetTeam-eTeam_TheLost, Child[2]=AdjustScoreForLostPriority)
+Behaviors=(BehaviorName=AISpecificModifiers, NodeType=Sequence, Child[0]=IsTeam-eTeam_Alien, Child[1]=SSScoreTargetIfXCOMMindControlled)
+Behaviors=(BehaviorName=SSScoreTargetIfXCOMMindControlled, NodeType=Successor, Child[0]=ScoreTargetIfXCOMMindControlled)
+Behaviors=(BehaviorName=ScoreTargetIfXCOMMindControlled, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_Alien, Child[1]=TargetAffectedByEffect-MindControl, Child[2]=SSScoreOut50PercentOfTheTime)
+Behaviors=(BehaviorName=SSScoreOut50PercentOfTheTime, NodeType=Successor, Child[0]=ScoreOut50PercentOfTheTime))
+Behaviors=(BehaviorName=ScoreOut50PercentOfTheTime, NodeType=RandFilter, Child[0]=AddToTargetScore_-1000, Param[0]=50)

; No more Grenade Tosses for Panic
-Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector, \\
	Child[0]=ShootRandomEnemyForPanic, Param[0]=5, \\
	Child[1]=TryPanickedGrenadeToss, Param[1]=1, \\
	Child[2]=DoCower, Param[2]=2)

; Shooting is 25%, Cower 75%
+Behaviors=(BehaviorName=PanickedAction, NodeType=RandSelector, \\
	Child[0]=SelectAnyRandomStandardShotTarget, Param[0]=1, \\
	Child[1]=DoCower, Param[1]=3)

-Behaviors=(BehaviorName=PanickedMove, NodeType=Selector, Child[0]=PanickedFallBackUnsafe, Child[1]=MoveDefensiveWithLoSUnsafe, Child[2]=MoveDefensiveUnsafe)
; AmIBerserkedRightNow ensures that if it succeeds, the movement immediately ends with success and no movement.
+Behaviors=(BehaviorName=PanickedMove, NodeType=Selector, Child[0]=AmIBerserkedRightNow, Child[1]=HighCoverFallback, Child[2]=FallBackWithLoSUnsafe, Child[3]=MoveDefensiveWithLoSUnsafe, Child[4]=FallBackUnsafe, Child[5]=MoveDefensiveUnsafe)

; Turrets will now fire on non-marked targets.
-Behaviors=(BehaviorName=SacredCoilTargetScoreMarked, NodeType=Selector, Child[0]=ScoreTargetIfMarked, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=SacredCoilTargetScoreMarked, NodeType=Selector, Child[0]=ScoreTargetIfMarked, Child[1]=AddToTargetScore_10)

; Progeny Dark Event Flashbang fix. Major oversight. Acolyte, Resonant and Sorcerer allowed.
+Behaviors=(BehaviorName=FindPotentialAoETargets-ProgenyGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-ProgenyGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ProgenyGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-ProgenyGrenadeManyProfile, NodeType=Action)

+Behaviors=(BehaviorName=FindPotentialAoETargets-GPGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-GPGrenadeManyProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GPGrenadeFewProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-GPGrenadeManyProfile, NodeType=Action)

+Behaviors=(BehaviorName=DarkEventActive-DarkEventAbility_Flashbang, NodeType=Condition) ; Doesnt work... Use Ability check instead
+Behaviors=(BehaviorName=AffectedByEffect-DarkEventFlashbangEffect, NodeType=Condition) ; The effect doesnt have a name, patched in code to DarkEventFlashbangEffect.

+Behaviors=(BehaviorName=DarkEventActive-DarkEventAbility_PlasmaGrenades, NodeType=Condition) ; Doesnt work... Use Ability check instead
+Behaviors=(BehaviorName=AffectedByEffect-DarkEventPlasmaGrenadesEffect, NodeType=Condition) ; The effect doesnt have a name, patched in code to DarkEventFlashbangEffect.

+Behaviors=(BehaviorName=TryGrenadeFirstActionNotFlanked, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=NotFlanked, Child[2]=TryGrenade)
+Behaviors=(BehaviorName=TryGPGrenadeFirstActionNotFlanked, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=NotFlanked, Child[2]=TryGPPlasmaGrenadeMany)

; Gray Phoenix Dark Event: Legionnaire, Viper_Python, Adder, Dominator, Paladin, Gray Phoenix Leader, Praetorian
+Behaviors=(BehaviorName=TryGPPlasmaGrenadeMany, NodeType=Sequence, Child[0]=AffectedByEffect-DarkEventPlasmaGrenadesEffect, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-GPGrenadeManyProfile, Child[3]=SelectAoETarget-GPGrenadeManyProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryGPPlasmaGrenadeFew, NodeType=Sequence, Child[0]=AffectedByEffect-DarkEventPlasmaGrenadesEffect, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-GPGrenadeFewProfile, Child[3]=SelectAoETarget-GPGrenadeFewProfile, Child[4]=SelectAbility-ThrowGrenade)

+Behaviors=(BehaviorName=TryProgenyGrenadeMany, NodeType=Sequence, Child[0]=AffectedByEffect-DarkEventFlashbangEffect, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-ProgenyGrenadeManyProfile, Child[3]=SelectAoETarget-ProgenyGrenadeManyProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryProgenyGrenadeFew, NodeType=Sequence, Child[0]=AffectedByEffect-DarkEventFlashbangEffect, Child[1]=IsAbilityAvailable-ThrowGrenade, Child[2]=FindPotentialAoETargets-ProgenyGrenadeFewProfile, Child[3]=SelectAoETarget-ProgenyGrenadeFewProfile, Child[4]=SelectAbility-ThrowGrenade)
+Behaviors=(BehaviorName=TryProgenyGrenadeManyNotFlanked, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=TryProgenyGrenadeMany)
+Behaviors=(BehaviorName=TryProgenyGrenadeFewNotFlanked, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=TryProgenyGrenadeFew)

+Behaviors=(BehaviorName=TryGrenade33, NodeType=RandFilter, Child[0]=TryGrenade, Param[0]=33)
+Behaviors=(BehaviorName=TryGrenade50, NodeType=RandFilter, Child[0]=TryGrenade, Param[0]=50)

+Behaviors=(BehaviorName=TryGrenade50, NodeType=RandFilter, Child[0]=TryGrenade, Param[0]=50)

+Behaviors=(BehaviorName=MoveDefensiveWithLoSIfFirstAbility50, NodeType=RandFilter, Child[0]=MoveDefensiveWithLoSIfFirstAbility, Param[0]=50)

; These 2 are deprecated. Leave them in, but patch them for Enemy check.
-Behaviors=(BehaviorName=MoveHunting, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveHuntingUnsafe)
-Behaviors=(BehaviorName=HuntEnemy, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SetAlertDataStack, Child[2]=GenericSelectBestAlert, Child[3]=HasValidAlertDataLocation, Child[4]=MoveStandardWithDestination)
+Behaviors=(BehaviorName=MoveHunting, NodeType=Selector, Child[0]=MoveHuntingUnsafe)
+Behaviors=(BehaviorName=HuntEnemy, NodeType=Selector, Child[0]=HuntEnemyUnsafe)

; You cannot Hunt if you see no enemies. I did the same thing in XCOM 2, but the maps are so small its even less of an issue here so don't move if you don't need to.
-Behaviors=(BehaviorName=MoveHuntingUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=FindDestinationForHunter, Child[2]=SelectAbility-StandardMove)
-Behaviors=(BehaviorName=HuntWithLoS, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToEnemyLoS, Child[2]=FindDestination-MWP_Hunting)
-Behaviors=(BehaviorName=HuntEnemyWithCover, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=SetAlertDataStack, Child[2]=GenericSelectBestAlert, Child[3]=HasValidAlertDataLocation, Child[4]=AlertDataMovementUseCover, Child[5]=MoveStandardWithDestination)
-Behaviors=(BehaviorName=HuntEnemyUnsafe, NodeType=Sequence, Child[0]=SetAlertDataStack, Child[1]=GenericSelectBestAlert, Child[2]=HasValidAlertDataLocation, Child[3]=MoveStandardWithDestinationUnsafe)

; Hunting doesn't work. Change to the new Contact behaviors, which is exactly why they were created from what I see.
; Only use these if you don't see enemies because if you do, you should use JobMovement or direct commands like MoveMelee MoveStandard etc.
; The base game seems to allow DASHING. We need to stop that.
+Behaviors=(BehaviorName=MoveHuntingUnsafe, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=AdvanceToContact)
+Behaviors=(BehaviorName=HuntWithLoS, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=AdvanceToContact)
+Behaviors=(BehaviorName=HuntEnemyWithCover, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=AdvanceToContact)
+Behaviors=(BehaviorName=HuntEnemyUnsafe, NodeType=Sequence, Child[0]=NoVisibleEnemies, Child[1]=FanaticAdvanceToContact)

; Cower includes Delay Turn, if its modded in the units will use it.
-Behaviors=(BehaviorName=DoCower, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDown, Child[1]=SelectAbility-HunkerDown)
+Behaviors=(BehaviorName=DoCower, NodeType=Selector, Child[0]=DoDelayTurn, Child[1]=DoHunkerDown)

+Behaviors=(BehaviorName=DoDelayTurn, NodeType=Sequence, Child[0]=IsAbilityAvailable-DelayTurn, Child[1]=SelectAbility-DelayTurn)
+Behaviors=(BehaviorName=IsAbilityAvailable-DelayTurn, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-DelayTurn, NodeType=Action)
+Behaviors=(BehaviorName=DoHunkerDown, NodeType=Sequence, Child[0]=IsAbilityAvailable-HunkerDown, Child[1]=SelectAbility-HunkerDown)

; **********************************************************************************************************************************************************************************************
; FAILSAFE ACTION SELECTORS
; For when the Behavior Tree fails to run properly, either by my fault or the unit's.
; **********************************************************************************************************************************************************************************************
; Implemented Red Screens for debugging, better than "SkipMove"
; Do not use TryGrenade here, there are Dark Event conditions and not everyone has the right to use it!
+Behaviors=(BehaviorName=FailsafeFirstActionSelector, NodeType=Selector, Child[0]=NeedsReloadNotFlanked, Child[1]=GenericAbilityRoot, Child[2]=FallbackHeightUnsafe, Child[3]=MoveStandardHeightUnsafe, Child[4]=MoveRandomUnsafe, Child[5]=DoCower, Child[6]=DoRedScreenFailure-AllActionsFailedFirst)
+Behaviors=(BehaviorName=FailsafeLastActionSelector, NodeType=Selector, Child[0]=GenericAbilityRoot, Child[1]=ShootIfAvailable_Favorable, Child[2]=TryAnyOverwatch25, Child[3]=NeedsReloadNotFlanked, Child[4]=ShootAnything, Child[5]=TryStandardMeleeFANATICUnsafe, Child[6]=TryAnyOverwatchOrBladestorm, Child[7]=DoCower, Child[8]=HuntEnemyUnsafeDidntJustMove, Child[9]=SelectHeatSeekMoveDidntJustMove, Child[10]=TryTriggerRage, Child[11]=DoRedScreenFailure-AllActionsFailedLast)

+Behaviors=(BehaviorName=HuntEnemyUnsafeDidntJustMove, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=HuntEnemyUnsafe)
+Behaviors=(BehaviorName=SelectHeatSeekMoveDidntJustMove, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=SelectHeatSeekMove)

+Behaviors=(BehaviorName=DoRedScreenFailure-AllActionsFailedFirst, NodeType=Action, Param[0]="RedScreen-Error On Behavior Tree (FIRST ACTION)! Unit did not find anything to do!")
+Behaviors=(BehaviorName=DoRedScreenFailure-AllActionsFailedLast, NodeType=Action, Param[0]="RedScreen-Error On Behavior Tree (LAST ACTION)! Unit did not find anything to do!")

+Behaviors=(BehaviorName=ShootAnything, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectTargetForAnyShot, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectTargetForAnyShot, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=GenericSelectTargetSomewhatRandomly, Child[2]=HasValidTarget-StandardShot)

; Why would you run towards the enemy if you are in danger? It's not natural.
-Behaviors=(BehaviorName=StickyGrenade, NodeType=Selector, Child[0]=ChanceRunToTeammate, Child[1]=ChanceRunToEnemy, Child[2]=RandomMovement)
+Behaviors=(BehaviorName=StickyGrenade, NodeType=Selector, Child[0]=BerserkMoveIn, Child[1]=FallBackUnsafe, Child[2]=FallBackWithLoSUnsafe, Child[3]=NCFallBackWithLoSUnsafe, Child[4]=MoveRandomUnsafe, Child[5]=SkipMove)
+Behaviors=(BehaviorName=BerserkMoveIn, NodeType=Sequence, Child[0]=AmIBerserkedRightNow, Child[1]=MoveMeleeDashFANATICUnsafe)
+Behaviors=(BehaviorName=AmIBerserkedRightNow, NodeType=Selector, Child[0]=AffectedByEffect-MutonRageBerserk, Child[1]=AffectedByEffect-Berserk, Child[2]=AffectedByEffect-FrenzyEffect, Child[3]=AffectedByEffect-RageTriggered)

; **********************************************************************************************************************************************************************************************
; **********************************************************************************************************************************************************************************************
; **********************************************************************************************************************************************************************************************

; **********************************************************************************************************************************************************************************************
; **********************************************************************************************************************************************************************************************
; A L L   R O O T S
; **********************************************************************************************************************************************************************************************
; **********************************************************************************************************************************************************************************************

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; CRIMINAL SENTINEL
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="CriminalSentinel::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=MoveBackWithLOSIfFlankedFirstAction, \\
	Child[2]=TryMarkTargetOption, \\
	Child[3]=ShootIfAvailable, \\
	Child[4]=TryGrenade, \\
	Child[5]=DoCower )

-Behaviors=(BehaviorName="CriminalSentinel::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryMarkTargetOption, \\
	Child[2]=ShootIfAvailable, \\
	Child[3]=TryGrenade, \\
	Child[4]=TryOverwatchOrCower )

; ***********************************************************************************************************
+Behaviors=(BehaviorName="CriminalSentinel::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=MoveBackWithLOSIfFlankedFirstAction, \\
	Child[1]=TryMarkTargetOption, \\
	Child[2]=NeedsReload, \\
	Child[3]=ShootFlankedIn8Tiles, \\
	Child[4]=TryGrenade, \\
	Child[5]=ShootIfIdeal, \\
	Child[6]=ConsiderOverwatchIfSupported, \\
	Child[7]=MoveDefensiveWithLoSIfFirstAbility50, \\
	Child[8]=HuntEnemyWithCover, \\
   Child[9]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="CriminalSentinel::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGrenade, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=TryMarkTargetOption, \\
	Child[4]=TryAnyOverwatchOrCower, \\
	Child[5]=HuntEnemyWithCover, \\
   Child[6]=FailsafeLastActionSelector)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; CRIMINAL VANGUARD
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="CriminalVanguard::AdventSLFirstActionSelector", NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=TryStunLance, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=SelectMove_JobOrMelee, \\
	Child[4]=HuntEnemyWithCover)

-Behaviors=(BehaviorName="CriminalVanguard::AdventSLLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryStunLance, \\
	Child[2]=ShootIfIdealThenBladestorm, \\
	Child[3]=HuntEnemyWithCoverThenBladestorm, \\
	Child[4]=SelectMove_JobOrMelee, \\
	Child[5]=TryBladestormOverwatch)

; ***********************************************************************************************************

+Behaviors=(BehaviorName="CriminalVanguard::AdventSLFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryTempoSurgeScaledDifficulty, \\
	Child[1]=NeedsReload, \\
	Child[2]=TrySlash, \\
	Child[3]=NeedsReload, \\
	Child[4]=SelectMove_JobOrMelee, \\
	Child[5]=FanaticAdvanceToContact_10, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=TryBladestormOverwatch, \\
   Child[8]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="CriminalVanguard::AdventSLLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
   Child[1]=BladestormCheck, \\
	Child[2]=TrySlash, \\
	Child[3]=NeedsReload, \\
	Child[4]=SelectMove_JobOrMeleeThenBladestorm, \\
	Child[5]=HuntEnemyWithCoverThenBladestorm, \\
	Child[6]=TryBladestormOverwatch, \\
   Child[7]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=SelectMove_JobOrMeleeThenBladestorm, NodeType=Sequence, Child[0]=MoveMelee, Child[1]=ForceBladestormOverwatchSuccess)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; CRIMINAL OUTLAW (TROOPER)
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; Not allowed to Move then Grenade. Independent check.
-Behaviors=(BehaviorName="CriminalOutlaw::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=MoveBackWithLOSIfFlankedFirstAction, \\
	Child[2]=ShootIfAvailable, \\
	Child[3]=TryGrenade, \\
	Child[4]=DoCower )

-Behaviors=(BehaviorName="CriminalOutlaw::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=ShootIfAvailable, \\
	Child[2]=TryGrenade, \\
	Child[3]=TryOverwatchOrCower )

; ***********************************************************************************************************

+Behaviors=(BehaviorName="CriminalOutlaw::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
   Child[1]=NeedsReload, \\
	Child[2]=TryGrenade33, \\
	Child[3]=ShootFlankedIn8Tiles, \\
	Child[4]=SelectMove_JobOrDefensive50, \\
   Child[5]=ShootIfIdeal, \\
	Child[6]=ConsiderOverwatchIfSupported, \\
	Child[7]=SelectMove_JobOrDefensive, \\
	Child[8]=HuntEnemyWithCover,\\
   Child[9]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="CriminalOutlaw::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGrenade50, \\
   Child[2]=NeedsReload, \\
	Child[3]=ShootFlankedIn8Tiles, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=TryGrenade, \\
	Child[6]=TryAnyOverwatchOrCower, \\
	Child[7]=HuntEnemyWithCover, \\
   Child[8]=FailsafeLastActionSelector)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; CRIMINAL GRENADIER
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************

-Behaviors=(BehaviorName="CriminalGrenadier::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=MoveBackWithLOSIfFlankedFirstAction, \\
	Child[2]=TryGrenadeAny, \\
	Child[3]=ShootIfAvailable, \\
	Child[4]=DoCower )

-Behaviors=(BehaviorName="CriminalGrenadier::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGrenadeAny, \\
	Child[2]=ShootIfAvailable, \\
	Child[3]=TryOverwatchOrCower )	

; ***********************************************************************************************************

+Behaviors=(BehaviorName="CriminalGrenadier::AdventRedFirstActionSelector", NodeType=Selector, \\
   Child[0]=DoIfFlankedMove, \\
	Child[1]=TryGrenadeAny, \\
	Child[2]=NeedsReload, \\
	Child[3]=ShootFlankedIn8Tiles, \\
	Child[4]=TryMoveThenGrenade, \\
	Child[5]=SelectMove_JobOrDefensive, \\
   Child[6]=ShootIfIdeal, \\
	Child[7]=ConsiderOverwatchIfSupported, \\
	Child[8]=HuntEnemyWithCover, \\
   Child[9]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="CriminalGrenadier::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGrenadeAny, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=TryAnyOverwatchOrCower, \\
	Child[4]=HuntEnemyWithCover, \\
   Child[5]=FailsafeLastActionSelector )

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; LEGIONNAIRE
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=Muton_Legionnaire_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=ShootIfVeryGood, \\
	Child[2]=TryMoveThenGrenade, \\
	Child[3]=FlankedMoveSelector_ThenDefensiveOrRandom, \\
	Child[4]=MoveAggressiveUnsafe, \\
	Child[5]=TryShootFlanked, \\
	Child[6]=TryShootUnFlanked50, \\
	Child[7]=TryDemolition, \\
	Child[8]=SelectMoveProfileByJob, \\
	Child[9]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=Muton_Legionnaire_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=NeedsReload, \\
	Child[2]=ShootIfVeryGood, \\
	Child[3]=TryMoveThenGrenade, \\
	Child[4]=TryShootFlanked, \\
	Child[5]=TryShootUnFlanked50, \\
	Child[6]=TryDemolition, \\
	Child[7]=SelectMove_JobOrAggressive, \\
	Child[8]=HuntEnemyWithCover)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=Muton_Legionnaire_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
   Child[1]=NeedsReload, \\
	Child[2]=TryGPPlasmaGrenadeMany, \\
	Child[3]=ShootFlankedIn8Tiles, \\
	Child[4]=TryGPPlasmaGrenadeFew, \\
   Child[5]=TryDemolition20, \\
	Child[6]=Try_BomberStrike, \\
	Child[7]=ShootIfIdeal, \\
	Child[8]=MoveAggressiveUnsafe, \\
   Child[9]=TryShootOrReloadOrOverwatch, \\
	Child[10]=HuntEnemyWithCover, \\
   Child[11]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Muton_Legionnaire_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGPPlasmaGrenadeMany, \\
	Child[2]=Try_BomberStrike, \\
	Child[3]=NeedsReload, \\
	Child[4]=ShootFlankedIn8Tiles, \\
   Child[5]=TryGPPlasmaGrenadeFew, \\
	Child[6]=ConsiderOverwatchIfSupported, \\
	Child[7]=ShootIfIdeal, \\
	Child[8]=TryDemolition67, \\
	Child[9]=Try_BomberStrike50, \\
	Child[10]=TryShootOrReloadOrOverwatch, \\
	Child[11]=TryAnyOverwatchOrCower, \\
	Child[12]=HuntEnemyWithCover, \\
   Child[13]=FailsafeLastActionSelector)

; BomberStrike doesnt work for Legionnaire, Visual Animation missing. Not using it.
+Behaviors=(BehaviorName=Try_BomberStrike20, NodeType=RandFilter, Child[0]=Try_BomberStrike, Param[0]=50) 

; Don't do Demolition if you're alone. Needs at lest 2 buddies to fire on the target.
-Behaviors=(BehaviorName=TryDemolition, NodeType=Sequence, Child[0]=IsAbilityAvailable-Demolition, Child[1]=SelectTargetForDemolition,Child[2]=SelectAbility-Demolition)
+Behaviors=(BehaviorName=TryDemolition, NodeType=Sequence, Child[0]=ManyAlliesVisible, Child[1]=IsAbilityAvailable-Demolition, Child[2]=SelectTargetForDemolition, Child[3]=SelectAbility-Demolition)
+Behaviors=(BehaviorName=MoveAggressiveUnsafe50, NodeType=RandFilter, Child[0]=MoveAggressiveUnsafe, Param[0]=50)
+Behaviors=(BehaviorName=TryDemolition20, NodeType=RandFilter, Child[0]=TryDemolition, Param[0]=20)
+Behaviors=(BehaviorName=TryDemolition67, NodeType=RandFilter, Child[0]=TryDemolition, Param[0]=67)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; ANDROID
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=AndroidRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryTriggerSelfDestruct, \\
	Child[1]=TryEngageSelfDestruct, \\
	Child[2]=TryMoveTowardClosestEnemyTarget, \\
	Child[3]=DoCower )

-Behaviors=(BehaviorName=AndroidRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryTriggerSelfDestruct, \\
	Child[2]=NeedsReload, \\
	Child[3]=TryShootOrReload, \\
	Child[4]=TryMoveTowardClosestEnemyTarget, \\
	Child[5]=DoCower )

; ***********************************************************************************************************

+Behaviors=(BehaviorName=AndroidRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryTriggerSelfDestruct, \\
	Child[1]=TryEngageSelfDestruct, \\
   Child[2]=TryGrenade, \\
	Child[3]=NeedsReload, \\
	Child[4]=ShootFlankedIn8Tiles_50, \\
	Child[5]=SelectMove_JobOrFlanking, \\
	Child[6]=HuntEnemyWithCover, \\
   Child[7]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=AndroidRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryTriggerSelfDestruct, \\
	Child[2]=TryEngageSelfDestruct, \\
   Child[3]=TryGrenade, \\
	Child[4]=TryShootOrReload, \\
	Child[5]=TryAnyOverwatchOrCower, \\
	Child[6]=HuntEnemyWithCover, \\
   Child[7]=FailsafeLastActionSelector)

; Androids won't trigger self destruct if they are not damaged.
-Behaviors=(BehaviorName=TryEngageSelfDestruct, NodeType=Sequence, Child[0]=IsAbilityAvailable-EngageSelfDestruct, Child[1]=SetPotentialTargetStack, Child[2]=SelectClosestEnemyTarget_NonCivilianOrVIP, Child[3]=HasValidTarget-Potential, Child[4]=SelectAbility-EngageSelfDestruct)
+Behaviors=(BehaviorName=TryEngageSelfDestruct, NodeType=Sequence, Child[0]=IsAbilityAvailable-EngageSelfDestruct, Child[1]=HasWounds, Child[2]=SetPotentialTargetStack, Child[3]=SelectClosestEnemyTarget_NonCivilianOrVIP, Child[4]=HasValidTarget-Potential, Child[5]=SelectAbility-EngageSelfDestruct)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; ZOMBIE + SPECTRAL ZOMBIE
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="PsiZombie::CharacterRoot", NodeType=Selector, \\
	Child[0]=MimicBeaconBehavior, \\
	Child[1]=SpectralZombieBranch, \\
	Child[2]=GenericEnemyMeleeRootFANATIC)
-Behaviors=(BehaviorName="SpectralZombie::CharacterRoot", NodeType=Selector, Child[0]=SelectFromSpectralZombieAbilities)

; ***********************************************************************************************************

; Allow spectral zombies to attack same turn, this is an explicit exception to my rule because the unit summoning them wasted an action, it needs to pay off.
; They both use the same root, but Spectral Zombies check for exploding themselves.
+Behaviors=(BehaviorName="PsiZombie::CharacterRoot", NodeType=Selector, Child[0]=ZombieBehaviorRoot, Child[1]=MoveRandomUnsafe, Child[2]=SkipMove)
+Behaviors=(BehaviorName="SpectralZombie::CharacterRoot", NodeType=Selector, Child[0]=ZombieBehaviorRoot, Child[1]=MoveRandomUnsafe, Child[2]=SkipMove)

+Behaviors=(BehaviorName=ZombieBehaviorRoot, NodeType=Selector, Child[0]=ZombieRedFirstAction, Child[1]=ZombieRedLastAction)

+Behaviors=(BehaviorName=ZombieRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ZombieRedFirstActionSelector)
+Behaviors=(BehaviorName=ZombieRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=DoPrimePsiSelfDestruct, \\
   Child[1]=TryStandardMeleeUnsafe, \\
   Child[2]=MoveMeleeFANATICUnsafe, \\
   Child[3]=FanaticAdvanceToContact, \\
   Child[4]=TryBladestormOverwatch)

+Behaviors=(BehaviorName=ZombieRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ZombieRedLastActionSelector)
+Behaviors=(BehaviorName=ZombieRedLastActionSelector, NodeType=Selector, \\
   Child[0]=DoPrimePsiSelfDestruct, \\
   Child[1]=TryStandardMeleeUnsafe, \\
   Child[2]=MoveMeleeFANATICUnsafe, \\
   Child[3]=FanaticAdvanceToContact, \\
   Child[4]=TryBladestormOverwatch)

; Simplified Spectral Zombies. They will trigger Self Destruct and then blow up if you shoot them. That's it.
+Behaviors=(BehaviorName=DoPrimePsiSelfDestruct, NodeType=Sequence, Child[0]=AnyLivingEnemyVisible, Child[1]=SpectralRuptureNotEngaged, Child[2]=IsAbilityAvailable-EngagePsiSelfDestruct, Child[3]=SelectAbility-EngagePsiSelfDestruct)
; We have to check for the effect because Firaxis decided that the ability to prime and blow up would be the same name. Sigh. Allow to prime, do not allow to blow up.
+Behaviors=(BehaviorName=SpectralRuptureNotEngaged, NodeType=Inverter, Child[0]=SpectralRuptureEngaged)
+Behaviors=(BehaviorName=SpectralRuptureEngaged, NodeType=Selector, Child[0]=AffectedByEffect-SelfDestructEngagedImmunities)
+Behaviors=(BehaviorName=AffectedByEffect-SelfDestructEngagedImmunities, NodeType=Condition)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; GUARDIAN
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=GuardianFirstActionSelector, NodeType=Selector, \\
	Child[0]=FanaticAdvanceToContact_20, \\
	Child[1]=TryMoveForEnergyShield, \\
	Child[2]=TryEnergyShieldOnMultipleTargets, \\
	Child[3]=NeedsReload, \\
	Child[4]=FanaticAdvanceIfNothingToShoot, \\
	Child[5]=TryMoveForRiotGuard, \\
	Child[6]=TryRiotGuard, \\
	Child[7]=ShootIfIdeal, \\
	Child[8]=DoIfFlankedMove, \\
	Child[9]=SelectMove_JobOrDefensive, \\
	Child[10]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=GuardianLastActionSelector, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnAnyTarget, \\
	Child[1]=ShootIfIdeal, \\
	Child[2]=TryRiotGuard, \\
	Child[3]=TryShootOrReloadOrOverwatch,  \\
	Child[4]=FanaticAdvanceToContact, \\
	Child[5]=SelectMove_JobOrDefensive)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=GuardianFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryEnergyShieldOnMultipleTargets, \\
	Child[1]=TryRiotGuard, \\
   Child[2]=TryGrenadeFirstActionNotFlanked, \\
	Child[3]=TryRiotBash33, \\
	Child[4]=DoIfFlankedMove, \\
	Child[5]=NeedsReload, \\
	Child[6]=SelectMove_JobOrAggressive50, \\
	Child[7]=ConsiderOverwatchIfSupported, \\
	Child[8]=SelectMove_JobOrAggressive, \\
	Child[9]=HuntEnemyWithCover, \\
   Child[10]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=GuardianLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
   Child[1]=TryRiotGuard, \\
	Child[2]=TryEnergyShieldOnAnyTarget, \\
   Child[3]=TryGrenade, \\
	Child[4]=ShootIfIdeal, \\
	Child[5]=ConsiderOverwatchIfSupported, \\
	Child[6]=TryShootOrReload,  \\
	Child[7]=TryAnyOverwatchOrCower, \\
	Child[8]=TryRiotBash, \\
	Child[9]=HuntEnemyWithCover, \\
   Child[10]=FailsafeLastActionSelector)

; Moving to protect allies sounds like a cool behavior, and it looks great when it works, but its so broken and easily abusable.
; Instead, move RiotGuard to specific conditions and make the Bruiser more individualist. He's still a frontliner however, and
; will move aggressively instead of defensively to take the brunt of Overwatches.

; They have RiotBash but dont know how to use it, that's sad. Fixed.
+Behaviors=(BehaviorName=IsAbilityAvailable-RiotBash, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-RiotBash, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-RiotBash, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-RiotBash, NodeType=Condition)
+Behaviors=(BehaviorName=TryRiotBash, NodeType=Sequence, Child[0]=IsAbilityAvailable-RiotBash, Child[1]=HasHighHP, Child[2]=SelectTargetForRiotBash, Child[3]=SelectAbility-RiotBash)
+Behaviors=(BehaviorName=SelectTargetForRiotBash, NodeType=Sequence, Child[0]=SetTargetStack-RiotBash, Child[1]=SelectBestTargetForStandardMelee, Child[2]=HasValidTarget-RiotBash)
+Behaviors=(BehaviorName=TryRiotBash33, NodeType=RandFilter, Child[0]=TryRiotBash, Param[0]=33)
; Go ahead use it its free.
-Behaviors=(BehaviorName=TryRiotGuard, NodeType=Sequence, Child[0]=IsAbilityAvailable-RiotGuard, Child[1]=InRangeForRiotGuard, Child[2]=SelectAbility-RiotGuard)
+Behaviors=(BehaviorName=TryRiotGuard, NodeType=Sequence, Child[0]=RiotGuardConditions, Child[1]=DoRiotGuard)
+Behaviors=(BehaviorName=DoRiotGuard, NodeType=Sequence, Child[0]=IsAbilityAvailable-RiotGuard, Child[1]=SelectAbility-RiotGuard)
; Triggers if any of these is true. 3 is a crowd.
+Behaviors=(BehaviorName=RiotGuardConditions, NodeType=Selector, Child[0]=HasWounds, Child[1]=ManyEnemiesVisible, Child[2]=CheckIfInDanger)
+Behaviors=(BehaviorName=ManyEnemiesVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]=">", Param[2]=2)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; CODEX
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=CodexRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenPsiBomb, \\
	Child[1]=DoIfFlankedMove_Teleport, \\
	Child[2]=TryTeleportDefensive, \\
	Child[3]=SelectMove_JobOrFlanking, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=CodexRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPsiBomb, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=HuntEnemyWithCover, \\
	Child[3]=SelectMove_JobOrFlanking)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=CodexRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove_Teleport, \\
	Child[1]=TryPsiBomb33, \\
	Child[2]=TryTeleportDefensive50, \\
	Child[3]=ShootFlankedIn8Tiles_50, \\
	Child[4]=SelectMove_JobOrFlanking, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=HuntEnemyWithCover, \\
   Child[7]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=CodexRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
   Child[1]=TryPsiBomb50, \\
	Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=TryShootOrReload, \\
	Child[4]=TryAnyOverwatch, \\
	Child[5]=HuntEnemyWithCover, \\
	Child[6]=DoIfFlankedMove, \\
	Child[7]=FailsafeLastActionSelector)

; Mixing up routines
+Behaviors=(BehaviorName=TryPsiBomb33, NodeType=RandFilter, Child[0]=TryPsiBomb, Param[0]=30)
+Behaviors=(BehaviorName=TryPsiBomb50, NodeType=RandFilter, Child[0]=TryPsiBomb, Param[0]=50)
+Behaviors=(BehaviorName=TryTeleportDefensive50, NodeType=RandFilter, Child[0]=TryTeleportDefensive, Param[0]=50)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; MUTON BOMBER
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=Muton_Bomber_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=TryGrenadeAny, \\
	Child[2]=TryMoveThenGrenade, \\
	Child[3]=Try_BomberStrike, \\
	Child[4]=DoIfFlankedMove, \\
	Child[5]=FlankedMoveSelector_ThenDefensiveOrRandom, \\
	Child[6]=TryShootFlanked, \\
	Child[7]=TryShootUnFlanked50, \\
	Child[8]=SelectMoveProfileByJob, \\
	Child[9]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=Muton_Bomber_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGrenadeAny, \\
	Child[2]=Try_BomberStrike, \\
	Child[3]=ShootIfAvailable, \\
	Child[4]=SelectMove_JobOrAggressive, \\
	Child[5]=HuntEnemyWithCover)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=Muton_Bomber_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenadeAny, \\
	Child[1]=TryMoveThenGrenade, \\
	Child[2]=Try_BomberStrike50, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=NeedsReload, \\
	Child[5]=ShootFlankedIn8Tiles_50, \\
	Child[6]=SelectMove_JobOrAggressive50, \\
	Child[7]=ShootIfIdeal, \\
	Child[8]=SelectMove_JobOrAggressive, \\
	Child[9]=HuntEnemyWithCover, \\
   Child[10]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Muton_Bomber_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGrenadeAny, \\
   Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=Try_BomberStrike50, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=TryAnyOverwatchOrCower, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=DoIfFlankedMove, \\
   Child[8]=FailsafeLastActionSelector)

; Don't melee after moving, it looks stupid for the Bomber. Also, this was given to the Legionnaire.
+Behaviors=(BehaviorName=Try_BomberStrike50, NodeType=RandFilter, Child[0]=Try_BomberStrike, Param[0]=50) 
-Behaviors=(BehaviorName=Try_BomberStrike, NodeType=Sequence, Child[0]=IsAbilityAvailable-BomberStrike, Child[1]=SelectTargetFor_BomberStrike,Child[2]=SelectAbility-BomberStrike)
+Behaviors=(BehaviorName=Try_BomberStrike, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=IsAbilityAvailable-BomberStrike, Child[2]=SelectTargetFor_BomberStrike, Child[3]=SelectAbility-BomberStrike)
-Behaviors=(BehaviorName=SelectTargetFor_BomberStrike, NodeType=Sequence, Child[0]=SetTargetStack-BomberStrike, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-BomberStrike)
+Behaviors=(BehaviorName=SelectTargetFor_BomberStrike, NodeType=Sequence, Child[0]=SetTargetStack-BomberStrike, Child[1]=SelectTargetForStandardMelee, Child[2]=HasValidTarget-BomberStrike)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; SECTOID DOMINATOR
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=Sectoid_DominatorRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=SelectMove_JobOrDefensive, \\
	Child[2]=NeedsReload, \\
	Child[3]=ShootIfVeryGood, \\
	Child[4]=TryPsiDisableOrDominatorMindControlOption, \\
	Child[5]=ShootIfIdeal, \\
	Child[6]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=Sectoid_DominatorRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=ShootIfVeryGood, \\
	Child[2]=TryPsiDisableOrDominatorMindControlOption, \\
	Child[3]=ShootIfIdeal, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrDefensive)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=Sectoid_DominatorRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=MoveDefensiveWithLoS50, \\
	Child[2]=TryPsiDisableOrDominatorMindControlOption, \\
   Child[3]=TryGPPlasmaGrenadeMany, \\
	Child[4]=NeedsReload, \\
	Child[5]=ShootFlankedIn8Tiles_50, \\
	Child[6]=SelectMove_JobOrDefensive, \\
	Child[7]=HuntEnemyWithCover, \\
   Child[8]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Sectoid_DominatorRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryDominatorMindControlOption, \\
	Child[2]=TryPsiDisable, \\
   Child[3]=TryGPPlasmaGrenadeMany, \\
   Child[4]=ShootFlankedIn8Tiles, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=TryAnyOverwatchOrCower, \\
	Child[7]=HuntEnemyWithCover, \\
	Child[8]=DoIfFlankedMove, \\
   Child[9]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=SelectMove_JobOrDefensive50, NodeType=RandFilter, Child[0]=SelectMove_JobOrDefensive, Param[0]=50)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; SECTOID PALADIN (ADVENT PRIEST ROOT)
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; Moving the Paladin to a proper two-action system instead of a single root. Smarter.
-Behaviors=(BehaviorName="AdventPriest::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PriestRedOrangeAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
; ***********************************************************************************************************
+Behaviors=(BehaviorName="AdventPriest::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=SectoidPaladin_RedAlert, Child[3]=GenericAlertHandler)

+Behaviors=(BehaviorName=SectoidPaladin_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=SectoidPaladin_RedAbilitySelector)
+Behaviors=(BehaviorName=SectoidPaladin_RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=SectoidPaladinRedFirstAction, Child[2]=SectoidPaladinRedLastAction)

+Behaviors=(BehaviorName=SectoidPaladinRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=SectoidPaladinRedFirstActionSelector)
+Behaviors=(BehaviorName=SectoidPaladinRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
   Child[1]=TryImpel, \\
	Child[2]=TryGPPlasmaGrenadeMany, \\
   Child[3]=TryPaladinShield, \\
	Child[4]=NeedsReload, \\
   Child[5]=ShootFlankedIn8Tiles_50, \\
	Child[6]=MoveDefensiveWithLoS50, \\
	Child[7]=TryGPPlasmaGrenadeFew, \\
	Child[8]=ShootIfIdeal, \\
	Child[9]=ConsiderOverwatchIfSupported, \\
	Child[10]=SelectMove_JobOrDefensive, \\
	Child[11]=HuntEnemyWithCover, \\
   Child[12]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=SectoidPaladinRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=SectoidPaladinRedLastActionSelector)
+Behaviors=(BehaviorName=SectoidPaladinRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
   Child[1]=TryImpel, \\
	Child[2]=TryGPPlasmaGrenadeMany, \\
   Child[3]=TryPaladinMedikit, \\
   Child[4]=TryPaladinShield, \\
	Child[5]=NeedsReload, \\
   Child[6]=ShootFlankedIn8Tiles, \\
	Child[7]=ShootIfIdeal, \\
	Child[8]=TryGPPlasmaGrenadeFew, \\
	Child[9]=ConsiderOverwatchIfSupported, \\
   Child[10]=TryShootOrReloadOrOverwatch, \\
   Child[11]=TryAnyOverwatchOrCower, \\
   Child[12]=DoIfFlankedMove, \\
   Child[13]=SelectMove_JobOrDefensive, \\
   Child[14]=HuntEnemyWithCover, \\
   Child[15]=FailsafeLastActionSelector)

; Use my new Tyranny selector.
-Behaviors=(BehaviorName=ScoreImpelTarget, NodeType=Selector, Child[0]=AddToTargetScore_1)
+Behaviors=(BehaviorName=ScoreImpelTarget, NodeType=Successor, Child[0]=EvaluateForTyranny)

; I'm going to remove HolyWarrior and give the Paladin a KineticShield charge throw instead!
+Behaviors=(BehaviorName=TryPaladinShield, NodeType=Sequence, Child[0]=IsAbilityAvailable-ShieldGeneratorAbility, Child[1]=SelectTargetForPaladinShield, Child[2]=SelectAbility-ShieldGeneratorAbility)
+Behaviors=(BehaviorName=IsAbilityAvailable-ShieldGeneratorAbility, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ShieldGeneratorAbility, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-ShieldGeneratorAbility, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-ShieldGeneratorAbility, NodeType=Action)
+Behaviors=(BehaviorName=WasLastAbility-ShieldGeneratorAbility, NodeType=Condition)

+Behaviors=(BehaviorName=SelectTargetForPaladinShield, NodeType=Sequence, Child[0]=SetTargetStack-ShieldGeneratorAbility, Child[1]=SelectBestTargetForPaladinShield, Child[2]=HasValidTarget-ShieldGeneratorAbility)
+Behaviors=(BehaviorName=SelectBestTargetForPaladinShield, NodeType=RepeatUntilFail, Child[0]=PaladinShieldEvaluateTargets)
+Behaviors=(BehaviorName=PaladinShieldEvaluateTargets, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScorePaladinShieldTarget, Child[2]=UpdateBestTarget)
; This is where the magic happens. Pick wounded targets. Never shield full enemies so Paladin doesnt just spam it all the time.
+Behaviors=(BehaviorName=ScorePaladinShieldTarget, NodeType=Sequence, Child[0]=IsTargetTeam-eTeam_Alien, Child[1]=SSPaladinCheckHPCondition)
+Behaviors=(BehaviorName=SSPaladinCheckHPCondition, NodeType=Successor, Child[0]=PaladinCheckHPCondition)
+Behaviors=(BehaviorName=PaladinCheckHPCondition, NodeType=Selector, Child[0]=PaladinVoidFullHPCheck, Child[1]=PaladinHighHPScoreCheck, Child[2]=PaladinLowHPScoreCheck)
+Behaviors=(BehaviorName=PaladinVoidFullHPCheck, NodeType=Sequence, Child[0]=PaladinVoidFullHPScore, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=PaladinHighHPScoreCheck, NodeType=Sequence, Child[0]=PaladinHighHPScore, Child[1]=AddToTargetScore_10)
+Behaviors=(BehaviorName=PaladinLowHPScoreCheck, NodeType=Sequence, Child[0]=PaladinLowHPScore, Child[1]=AddToTargetScore_20)

+Behaviors=(BehaviorName=PaladinVoidFullHPScore, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="==", Param[2]="100%")
+Behaviors=(BehaviorName=PaladinHighHPScore, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]=">=", Param[2]="50%")
+Behaviors=(BehaviorName=PaladinLowHPScore, NodeType=TargetStatCondition, Param[0]=eStat_HP, Param[1]="<", Param[2]="50%")

; The Paladin will heal targets around it who needs it in priority, but I didnt include movement checks and then heals. He's not a healer, he'll heal if it's a good choice at the moment but
; he's not going to go around healing people. You have to be near adjacent when he uses it then if you're low you'll get healed.
+Behaviors=(BehaviorName=TryPaladinMedikit, NodeType=Sequence, Child[0]=IsAbilityAvailable-MedikitHeal, Child[1]=SelectTargetForPaladinMedikit, Child[2]=SelectAbility-MedikitHeal)
+Behaviors=(BehaviorName=SelectTargetForPaladinMedikit, NodeType=Sequence, Child[0]=SetTargetStack-MedikitHeal, Child[1]=SelectBestTargetForPaladinMedikit, Child[2]=HasValidTarget-MedikitHeal)
+Behaviors=(BehaviorName=SelectBestTargetForPaladinMedikit, NodeType=RepeatUntilFail, Child[0]=PaladinMedikitEvaluateTargets)
+Behaviors=(BehaviorName=PaladinMedikitEvaluateTargets, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScorePaladinMedikitTarget, Child[2]=UpdateBestTarget)
; No robots, no mind controlled allies.
+Behaviors=(BehaviorName=ScorePaladinMedikitTarget, NodeType=Sequence, Child[0]=TargetIsAlly, Child[1]=TargetIsNotRobotic, Child[2]=TargetScoreMindControlledAlly, Child[3]=SSPaladinCheckHPCondition)

; ***********************************************************************************************************

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; RESONANT
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=Sectoid_ResonantRedFirstActionSelector, NodeType=Selector,      Child[0]=DoIfFlankedMove,      Child[1]=TryPsiDomain,     Child[2]=TryResonantSubservience,      Child[3]=TrySoulSiphon,      Child[4]=NeedsReload,      Child[5]=SelectMove_JobOrDefensive,      Child[6]=ShootIfIdeal,      Child[7]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=Sectoid_ResonantRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=NeedsReload, \\
	Child[2]=TryPsiDomain, \\
	Child[3]=TryResonantSubservience, \\
	Child[4]=TrySoulSiphon, \\
	Child[5]=ShootIfIdeal, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=SelectMove_JobOrDefensive)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=Sectoid_ResonantRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMoveNotSubservient, \\
	Child[1]=TryProgenyGrenadeMany, \\
	Child[2]=TryPsiDomainWithAlliesAndNotFlanked50, \\
	Child[3]=TryResonantSubservience50, \\
	Child[4]=TrySoulSiphon, \\
	Child[5]=TryProgenyGrenadeFew, \\
	Child[6]=NeedsReload, \\
	Child[7]=MoveAdvanceToCoverSubservient50, \\
   Child[8]=SelectMove_JobOrDefensive50, \\
   Child[9]=ShootFlankedIn8Tiles_50, \\
	Child[10]=ShootIfIdeal, \\
	Child[11]=ConsiderOverwatchIfSupported, \\
	Child[12]=MoveAdvanceToCoverLoSUnsafeSubservient, \\
	Child[13]=HuntEnemyWithCover, \\
   Child[14]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Sectoid_ResonantRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryProgenyGrenadeMany, \\
	Child[2]=TrySoulSiphonSubservientOnly, \\
	Child[3]=TryProgenyGrenadeFew, \\
	Child[4]=NeedsReload, \\
   Child[5]=ShootFlankedIn8Tiles, \\
	Child[6]=TryPsiDomainWithAlliesAndNotFlanked, \\
	Child[7]=TryShootOrReload, \\
   Child[8]=ResonantSubservientFire, \\
	Child[9]=TryAnyOverwatchOrCower, \\
	Child[10]=HuntEnemyWithCover, \\
	Child[11]=TryPsiDomain, \\
   Child[12]=TrySoulSiphon, \\
	Child[13]=DoIfFlankedMove, \\
   Child[14]=MoveAdvanceToCoverLoSUnsafeSubservient, \\
   Child[15]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=ResonantSubservientFire, NodeType=Sequence, Child[0]=IsSubservient, Child[1]=ShootAnything)

-Behaviors=(BehaviorName=ScoreSorcererPriority, NodeType=Sequence, Child[0]=TargetIsA_Sorcerer, Child[1]=AddToTargetScore_50)
-Behaviors=(BehaviorName=ScoreAcolytePriority, NodeType=Sequence, Child[0]=TargetIsA_Acolyte, Child[1]=AddToTargetScore_50)
+Behaviors=(BehaviorName=ScoreSorcererPriority, NodeType=Sequence, Child[0]=TargetIsA_Sorcerer, Child[1]=AddToTargetScore_70)
+Behaviors=(BehaviorName=ScoreAcolytePriority, NodeType=Sequence, Child[0]=TargetIsA_Acolyte, Child[1]=AddToTargetScore_30)

; If the unit is Subservient, make it more suicidal.
+Behaviors=(BehaviorName=MoveAdvanceToCoverLoSUnsafeSubservient, NodeType=Sequence, Child[0]=AffectedByEffect-SubservienceEffect, Child[1]=MoveAdvanceToCoverLoSUnsafe)
+Behaviors=(BehaviorName=MoveAdvanceToCoverSubservient50, NodeType=Sequence, Child[0]=AffectedByEffect-SubservienceEffect, Child[1]=MoveAdvanceToCover50)
+Behaviors=(BehaviorName=MoveAdvanceToCover50, NodeType=RandFilter, Child[0]=MoveAdvanceToCover, Param[0]=50)

; We don't want the Resonant to just open with Psi Domain and Subserve all the time. Mix it up.
+Behaviors=(BehaviorName=TryPsiDomainWithAlliesAndNotFlanked50, NodeType=RandFilter, Child[0]=TryPsiDomainWithAlliesAndNotFlanked, Param[0]=50)
+Behaviors=(BehaviorName=TryResonantSubservience50, NodeType=RandFilter, Child[0]=TryResonantSubservience, Param[0]=50)
+Behaviors=(BehaviorName=AffectedByEffect-PsiDomainDamage, NodeType=Condition)
+Behaviors=(BehaviorName=NotAffectedByEffectPsiDomain, NodeType=Inverter, Child[0]=AffectedByEffect-PsiDomainDamage)
-Behaviors=(BehaviorName=TryPsiDomain, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiDomain, Child[1]=SelectAbility-PsiDomain)
+Behaviors=(BehaviorName=TryPsiDomain, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiDomain, Child[1]=NotAffectedByEffectPsiDomain, Child[2]=SelectAbility-PsiDomain)
+Behaviors=(BehaviorName=TryPsiDomainWithAlliesAndNotFlanked, NodeType=Sequence, Child[0]=IsAbilityAvailable-PsiDomain, Child[1]=NotInDangerousArea, Child[2]=AnyAlliesVisible, Child[3]=SelectAbility-PsiDomain)

; Resonant will use Soul Siphon if above 4 HP and subservient.
-Behaviors=(BehaviorName=TrySoulSiphon, NodeType=Sequence, Child[0]=IsAbilityAvailable-SoulSiphon, Child[1]=SelectTargetForSoulSiphon,Child[2]=SelectAbility-SoulSiphon)
+Behaviors=(BehaviorName=TrySoulSiphon, NodeType=Sequence, Child[0]=IsAbilityAvailable-SoulSiphon, Child[1]=SiphonNotUnder4HP, Child[2]=SelectTargetForSoulSiphon, Child[3]=SelectAbility-SoulSiphon)
+Behaviors=(BehaviorName=TrySoulSiphonSubservientOnly, NodeType=Sequence, Child[0]=IsAbilityAvailable-SoulSiphon, Child[1]=IsSubservient, Child[2]=SiphonNotUnder4HP, Child[3]=SelectTargetForSoulSiphon, Child[4]=SelectAbility-SoulSiphon)

; Prevents killing yourself.
+Behaviors=(BehaviorName=SiphonNotUnder4HP, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]=">", Param[2]="3")

; These will always fail... You need to have successors to keep evaluating!
-Behaviors=(BehaviorName=SoulSiphonEvaluateTargets, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreIfTargetLowHP, Child[2]=ScoreSoulSiphonPriorityEnemies, Child[3]=UpdateBestTarget)
+Behaviors=(BehaviorName=SoulSiphonEvaluateTargets, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreIfTargetLowHP, Child[2]=SSScoreSoulSiphonPriorityEnemies, Child[3]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreIfTargetLowHP, NodeType=Successor, Child[0]=ScoreIfTargetLowHP)
+Behaviors=(BehaviorName=SSScoreSoulSiphonPriorityEnemies, NodeType=Successor, Child[0]=ScoreSoulSiphonPriorityEnemies)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; ACOLYTE
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="Acolyte::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=FlankedMoveSelector, \\
	Child[1]=TryPsionicSuplex55, \\
	Child[2]=TryMindFire, \\
	Child[3]=TryPsionicSuplex, \\
	Child[4]=NeedsReload, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=TryGrenade, \\
	Child[7]=DoCower )	

-Behaviors=(BehaviorName="Acolyte::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryPsionicSuplex55, \\
	Child[2]=TryMindFire, \\
	Child[3]=TryPsionicSuplex, \\
	Child[4]=NeedsReload, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=TryGrenade, \\
	Child[7]=TryOverwatchOrCower )

; ***********************************************************************************************************

+Behaviors=(BehaviorName="Acolyte::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryProgenyGrenadeMany, \\
	Child[2]=TryMindFireScaledDifficulty, \\
	Child[3]=TryPsionicSuplex30, \\
	Child[4]=TryProgenyGrenadeFew, \\
	Child[5]=NeedsReload, \\
	Child[6]=MoveDefensiveWithLoS50, \\
	Child[7]=ShootFlankedIn8Tiles_50, \\
	Child[8]=ConsiderOverwatchIfSupported, \\
	Child[9]=MoveDefensiveWithLoS, \\
	Child[10]=HuntEnemyWithCover, \\
   Child[11]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="Acolyte::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryProgenyGrenadeMany, \\
	Child[2]=TryMindFireScaledDifficulty, \\
	Child[3]=TryProgenyGrenadeFew, \\
	Child[4]=TryPsionicSuplex50, \\
   Child[5]=ShootFlankedIn8Tiles, \\
	Child[6]=TryShootOrReload, \\
	Child[7]=TryAnyOverwatchOrCower, \\
	Child[8]=HuntEnemyWithCover, \\
	Child[9]=DoIfFlankedMove, \\
	Child[10]=TryPsionicSuplex, \\
	Child[11]=TryMindFire, \\
   Child[12]=FailsafeLastActionSelector)

; Percentages so the Acolyte mixes it up with some gunfire sometimes. Otherwise it would always spam MindFire/Suplex
; which are both very hard to resist. And if they don't work (immunity, etc.), they need to try to shoot sometimes.
+Behaviors=(BehaviorName=TryMindFire15, NodeType=RandFilter, Child[0]=TryMindFire, Param[0]=15)
+Behaviors=(BehaviorName=TryMindFire20, NodeType=RandFilter, Child[0]=TryMindFire, Param[0]=20)
+Behaviors=(BehaviorName=TryMindFire25, NodeType=RandFilter, Child[0]=TryMindFire, Param[0]=25)
+Behaviors=(BehaviorName=TryMindFire30, NodeType=RandFilter, Child[0]=TryMindFire, Param[0]=30)
+Behaviors=(BehaviorName=TryPsionicSuplex30, NodeType=RandFilter, Child[0]=TryPsionicSuplex, Param[0]=30)
+Behaviors=(BehaviorName=TryPsionicSuplex50, NodeType=RandFilter, Child[0]=TryPsionicSuplex, Param[0]=50)
+Behaviors=(BehaviorName=SelectMoveStandard50, NodeType=RandFilter, Child[0]=SelectMoveStandard, Param[0]=50)
+Behaviors=(BehaviorName=MoveStandardWithLoS50, NodeType=RandFilter, Child[0]=MoveStandardWithLoS, Param[0]=50)
+Behaviors=(BehaviorName=MoveDefensiveWithLoS50, NodeType=RandFilter, Child[0]=MoveDefensiveWithLoS, Param[0]=50)
; Scale MindFire usage according to difficulty. Unresistable, unblockable damage that ignores cover armor and shields that has no immunity in game. Pretty powerful stuff.
+Behaviors=(BehaviorName=TryMindFireScaledDifficulty, NodeType=Selector, Child[0]=TryMindFireEasy, Child[1]=TryMindFireNormal, Child[2]=TryMindFireExpert, Child[3]=TryMindFireImpossible)
+Behaviors=(BehaviorName=TryMindFireEasy, NodeType=Sequence, Child[0]=IsDifficultyEasy, Child[1]=TryMindFire15)
+Behaviors=(BehaviorName=TryMindFireNormal, NodeType=Sequence, Child[0]=IsDifficultyNormal, Child[1]=TryMindFire20)
+Behaviors=(BehaviorName=TryMindFireExpert, NodeType=Sequence, Child[0]=IsDifficultyHard, Child[1]=TryMindFire25)
+Behaviors=(BehaviorName=TryMindFireImpossible, NodeType=Sequence, Child[0]=IsDifficultyClassic, Child[1]=TryMindFire30)

; ************************************************************************************************************
; ************************************************************************************************************
; ************************************************************************************************************
; SORCERER
; ************************************************************************************************************
; ************************************************************************************************************
; ************************************************************************************************************
-Behaviors=(BehaviorName="Sorcerer::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryWrithe, \\
	Child[1]=TryTeleportForWrithe, \\
	Child[2]=TryTeleportNonWrithe, \\
	Child[3]=NeedsReload, \\
	Child[4]=TryTyranny50, \\
	Child[5]=TryNullLance, \\
	Child[6]=TryTyranny, \\
	Child[7]=ShootIfAvailable, \\
	Child[8]=DoCower )

-Behaviors=(BehaviorName="Sorcerer::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryTeleportAfterWrithe, \\
	Child[2]=TryWrithe, \\
	Child[3]=TryTyranny50, \\
	Child[4]=TryNullLance, \\
	Child[5]=TryTyranny, \\
	Child[6]=ShootIfAvailable, \\
	Child[7]=DoCower )

; ***********************************************************************************************************

+Behaviors=(BehaviorName="Sorcerer::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryWrithe, \\
	Child[1]=TryTeleportForWrithe, \\
	Child[2]=TryTeleportDefensive, \\
	Child[3]=TryProgenyGrenadeManyNotFlanked, \\
	Child[4]=MoveDefensiveWithLoS50, \\
	Child[5]=TryTyranny50, \\
	Child[6]=TryNullLance, \\
	Child[7]=TryProgenyGrenadeFewNotFlanked, \\
	Child[8]=NeedsReload, \\
	Child[9]=ShootFlankedIn8Tiles_50, \\
	Child[10]=MoveDefensiveWithLoS, \\
	Child[11]=HuntEnemyWithCover, \\
   Child[12]=FailsafeFirstActionSelector)
	
+Behaviors=(BehaviorName="Sorcerer::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryProgenyGrenadeMany, \\
	Child[2]=TryTeleportAfterWrithe, \\
	Child[3]=TryWrithe, \\
	Child[4]=TryNullLance, \\
	Child[5]=TryProgenyGrenadeFew, \\
	Child[6]=TryTyranny, \\
	Child[7]=TryShootOrReload, \\
	Child[8]=TryAnyOverwatchOrCower, \\
	Child[9]=HuntEnemyWithCover, \\
	Child[10]=DoIfFlankedMove, \\
   Child[11]=FailsafeLastActionSelector)

; Don't Tyranny if you are flanked.
-Behaviors=(BehaviorName=TryTyranny, NodeType=Sequence, Child[0]=IsAbilityAvailable-Tyranny, Child[1]=SelectTargetForTyranny,Child[2]=SelectAbility-Tyranny)
+Behaviors=(BehaviorName=TryTyranny, NodeType=Sequence, Child[0]=NotFlanked, Child[1]=IsAbilityAvailable-Tyranny, Child[2]=SelectTargetForTyranny,Child[3]=SelectAbility-Tyranny)

; Don't Tyranny a target low in HP or afflicted with a damaging condition, he's just going to die faster.
-Behaviors=(BehaviorName=EvaluateForTyranny, NodeType=Sequence, Child[0]=IsNotLaterGroupInSamePlayerInitiative, Child[1]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=EvaluateForTyranny, NodeType=Sequence, Child[0]=IsNotLaterGroupInSamePlayerInitiative, Child[1]=TargetIsVisibleToPlayer, Child[2]=SSScoreOutAfflictedUnitsTyranny, Child[3]=SSScoreOutImpairedUnitsTyranny, Child[4]=AddSmallRandomTargetScore)
+Behaviors=(BehaviorName=SSScoreOutAfflictedUnitsTyranny, NodeType=Successor, Child[0]=ScoreOutAfflictedUnitsTyranny)
+Behaviors=(BehaviorName=ScoreOutAfflictedUnitsTyranny, NodeType=Sequence, Child[0]=IsBloodied, Child[1]=CheckIfAfflictedTyranny, Child[2]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=CheckIfAfflictedTyranny, NodeType=Selector, Child[0]=TargetAffectedByEffect-Poisoned, Child[1]=TargetAffectedByEffect-Burning, Child[2]=TargetAffectedByEffect-Acid, Child[3]=TargetAffectedByEffect-Disoriented)
+Behaviors=(BehaviorName=AffectedByEffect-Acid, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Disoriented, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Stunned, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Acid, NodeType=Condition)
+Behaviors=(BehaviorName=TargetAffectedByEffect-Burning, NodeType=Condition)
+Behaviors=(BehaviorName=SSScoreOutImpairedUnitsTyranny, NodeType=Successor, Child[0]=ScoreOutImpairedUnitsTyranny)
+Behaviors=(BehaviorName=ScoreOutImpairedUnitsTyranny, NodeType=Sequence, Child[0]=AffectedByEffect-Stunned, Child[1]=AddToTargetScore_-1000)

-Behaviors=(BehaviorName=TryTeleportDefensive, NodeType=Sequence, Child[0]=IsAbilityAvailable-Teleport, Child[1]=ResetDestinationSearch, Child[2]=RestrictToCurrentBreachRoom, Child[3]=UseDashMovement, Child[4]=FindDestinationWithLoS-MWP_IsoTeleport, Child[5]=SelectAbility-Teleport)
+Behaviors=(BehaviorName=TryTeleportDefensive, NodeType=Sequence, Child[0]=IsAbilityAvailable-Teleport, Child[1]=ResetDestinationSearch, Child[2]=RestrictToCurrentBreachRoom, Child[3]=RestrictToUnflanked, Child[4]=UseDashMovement, Child[5]=FindDestinationWithLoS-MWP_IsoTeleport, Child[6]=SelectAbility-Teleport)

-Behaviors=(BehaviorName=TryTeleportAfterWrithe, NodeType=Sequence, Child[0]=AffectedByEffect-Writhe, Child[1]=TryTeleportNonWrithe)
+Behaviors=(BehaviorName=TryTeleportAfterWrithe, NodeType=Sequence, Child[0]=AffectedByEffect-Writhe, Child[1]=TryEscapeMovementSorcerer)
+Behaviors=(BehaviorName=TryEscapeMovementSorcerer, NodeType=Selector, Child[0]=TryTeleportDefensive, Child[1]=FindAnyFallbackDest)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; THRALL
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="Thrall::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TrySubservience, \\
	Child[1]=NeedsReload, \\
	Child[2]=ShootIfVeryGood_50, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=FlankedMoveSelector_ThenDefensiveOrRandom_50, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=TryGrenade, \\
	Child[7]=DoCower )

-Behaviors=(BehaviorName="Thrall::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=ShootIfAvailable, \\
	Child[2]=TryGrenade, \\
	Child[3]=TryOverwatchOrCower )

; ***********************************************************************************************************
; Thralls always move on their first action if they cant fire its one of their weaknesses on purpose.

+Behaviors=(BehaviorName="Thrall::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TrySubservience, \\
   Child[1]=DoIfFlankedMoveNotSubservient, \\
	Child[2]=NeedsReload, \\
	Child[3]=ShootIfIdeal, \\
	Child[4]=MoveAdvanceToCoverLoSUnsafe, \\
	Child[5]=TryMoveThenGrenade, \\
	Child[6]=MoveAggressiveUnsafe, \\
	Child[7]=HuntEnemyWithCover, \\
   Child[8]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="Thrall::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryGrenade, \\
   Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=ConsiderOverwatchIfSupported, \\
	Child[4]=TryShootOrReload, \\
   Child[5]=ThrallSubservientFire, \\
	Child[6]=TryAnyOverwatchOrCower, \\
	Child[7]=HuntEnemyWithCover, \\
	Child[8]=DoIfFlankedMove, \\
   Child[9]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=DoIfFlankedMoveNotSubservient, NodeType=Sequence, Child[0]=NotSubservient, Child[1]=DoIfFlankedMove)
+Behaviors=(BehaviorName=NotSubservient, NodeType=Inverter, Child[0]=CheckSubservience)
+Behaviors=(BehaviorName=IsSubservient, NodeType=Selector, Child[0]=CheckSubservience)
+Behaviors=(BehaviorName=CheckSubservience, NodeType=Selector, Child[0]=AffectedByEffect-SubservienceEffect, Child[1]=AffectedByEffect-Subservience)
+Behaviors=(BehaviorName=AffectedByEffect-SubservienceEffect, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Subservience, NodeType=Condition)
+Behaviors=(BehaviorName=ThrallSubservientFire, NodeType=Sequence, Child[0]=IsSubservient, Child[1]=ShootAnything)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; RONIN
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="Ronin::AdventSLFirstActionSelector", NodeType=Selector, \\
	Child[0]=FanaticAdvanceToContact_20, \\
	Child[1]=TryTempoSurge, \\
	Child[2]=NeedsReload, \\
	Child[3]=TrySlash, \\
	Child[4]=FanaticAdvanceToContact_10, \\
	Child[5]=SelectMove_JobOrMelee, \\
	Child[6]=TryBladestormOverwatch)

-Behaviors=(BehaviorName="Ronin::AdventSLLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TrySlash, \\
	Child[2]=ShootIfIdealThenBladestorm, \\
	Child[3]=AdvanceToContact, \\
	Child[4]=SelectMove_JobOrMelee, \\
	Child[5]=TryBladestormOverwatch)

; ***********************************************************************************************************
+Behaviors=(BehaviorName="Ronin::AdventSLFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryTempoSurgeScaledDifficulty, \\
	Child[1]=NeedsReload, \\
	Child[2]=TrySlash, \\
	Child[3]=NeedsReload, \\
	Child[4]=SelectMove_JobOrMelee, \\
	Child[5]=FanaticAdvanceToContact_10, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=TryBladestormOverwatch, \\
   Child[8]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="Ronin::AdventSLLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
   Child[1]=BladestormCheck, \\
	Child[2]=TrySlash, \\
	Child[3]=NeedsReload, \\
	Child[4]=SelectMove_JobOrMeleeThenBladestorm, \\
	Child[5]=HuntEnemyWithCoverThenBladestorm, \\
	Child[6]=TryBladestormOverwatch, \\
   Child[7]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=TryTempoSurge25, NodeType=RandFilter, Child[0]=TryTempoSurge, Param[0]=25)
+Behaviors=(BehaviorName=TryTempoSurge50, NodeType=RandFilter, Child[0]=TryTempoSurge, Param[0]=50)
+Behaviors=(BehaviorName=TryTempoSurge75, NodeType=RandFilter, Child[0]=TryTempoSurge, Param[0]=75)
+Behaviors=(BehaviorName=TryTempoSurge90, NodeType=RandFilter, Child[0]=TryTempoSurge, Param[0]=90)
+Behaviors=(BehaviorName=TryTempoSurgeScaledDifficulty, NodeType=Selector, Child[0]=TryTempoSurgeEasy, Child[1]=TryTempoSurgeNormal, Child[2]=TryTempoSurgeExpert, Child[3]=TryTempoSurgeImpossible)
+Behaviors=(BehaviorName=TryTempoSurgeEasy, NodeType=Sequence, Child[0]=IsDifficultyEasy, Child[1]=TryTempoSurge25)
+Behaviors=(BehaviorName=TryTempoSurgeNormal, NodeType=Sequence, Child[0]=IsDifficultyNormal, Child[1]=TryTempoSurge50)
+Behaviors=(BehaviorName=TryTempoSurgeExpert, NodeType=Sequence, Child[0]=IsDifficultyHard, Child[1]=TryTempoSurge75)
+Behaviors=(BehaviorName=TryTempoSurgeImpossible, NodeType=Sequence, Child[0]=IsDifficultyClassic, Child[1]=TryTempoSurge90)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; MEC
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=SacredCoilMECFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenMicroMissiles, \\
	Child[1]=NeedsReload, \\
	Child[2]=ShootIfVeryGood, \\
	Child[3]=SelectNCMove_JobOrFanatic, \\
	Child[4]=HuntEnemy, \\
	Child[5]=ShootIfIdealOrPinDown)

-Behaviors=(BehaviorName=SacredCoilMECRedLastActionSelector, NodeType=Selector,\\
	Child[0]=TryMicroMissiles, \\
	Child[1]=ChanceToPinDown, \\
	Child[2]=ShootIfIdealOrPinDown, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy)

-Behaviors=(BehaviorName=MECFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenMicroMissiles, \\
	Child[1]=SelectNCMove_JobOrFanatic, \\
	Child[2]=HuntEnemy, \\
	Child[3]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=MECRedLastActionSelector, NodeType=Selector,\\
	Child[0]=TryMicroMissiles, \\
	Child[1]=ShootOrSuppressIfNoGoodShot, \\
	Child[2]=HuntEnemy, \\
	Child[3]=SelectNCMove_JobOrFanatic, \\
	Child[4]=TryShootOrReloadOrOverwatch)	

-Behaviors=(BehaviorName=MECMk2FirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenMicroMissilesMk2, \\
	Child[1]=SelectNCMove_JobOrFanatic, \\
	Child[2]=HuntEnemy, \\
	Child[3]=TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=MECMk2RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryMicroMissilesMk2, \\
	Child[1]=ShootOrSuppressIfNoGoodShot, \\
	Child[2]=HuntEnemy, \\
	Child[3]=SelectNCMove_JobOrFanatic, \\
	Child[4]=TryShootOrReloadOrOverwatch)	

; ***********************************************************************************************************
+Behaviors=(BehaviorName=SacredCoilMECFirstActionSelector, NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=ShootFlankedIn8Tiles, \\
	Child[2]=TryMicroMissiles, \\
	Child[3]=SelectNCMove_JobOrFanatic50, \\
   Child[4]=MECChanceToSuppress, \\
	Child[5]=ChanceToPinDown, \\
	Child[6]=SelectNCMove_JobOrFanatic, \\
	Child[7]=HuntEnemyUnsafe, \\
   Child[8]=TryMicroMissiles, \\
   Child[9]=PinDownIfAvailable, \\
   Child[10]=MECSuppressionFireIfAvailable, \\
   Child[11]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=SacredCoilMECRedLastActionSelector, NodeType=Selector,\\
	Child[0]=GrantedActionsHandler, \\
   Child[1]=TryMicroMissiles, \\
	Child[2]=NeedsReload, \\
	Child[3]=ShootFlankedIn8Tiles, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
   Child[5]=DoMicroMissiles, \\
   Child[6]=PinDownIfAvailable, \\
   Child[7]=MECSuppressionFireIfAvailable, \\
	Child[8]=TryAnyOverwatch, \\
	Child[9]=HuntEnemyUnsafe, \\
   Child[10]=FailsafeLastActionSelector)

; In case the MECs want to use legacy code.
+Behaviors=(BehaviorName=MECFirstActionSelector, NodeType=Selector, Child[0]=SacredCoilMECFirstActionSelector)
+Behaviors=(BehaviorName=MECRedLastActionSelector, NodeType=Selector, Child[0]=SacredCoilMECRedLastActionSelector)
+Behaviors=(BehaviorName=MECMk2FirstActionSelector, NodeType=Selector, Child[0]=SacredCoilMECFirstActionSelector)
+Behaviors=(BehaviorName=MECMk2RedLastActionSelector, NodeType=Selector, Child[0]=SacredCoilMECRedLastActionSelector)

+Behaviors=(BehaviorName=MECSuppressionFireIfAvailable, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=IsAbilityAvailable-ChimeraSuppressionFire, Child[2]=SelectTargetForMECSuppression, Child[3]=SelectAbility-ChimeraSuppressionFire)
+Behaviors=(BehaviorName=MECChanceToSuppress, NodeType=RandFilter, Child[0]=MECSuppressionFireIfAvailable, Param[0]=20) 

+Behaviors=(BehaviorName=IsAbilityAvailable-ChimeraSuppressionFire, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-ChimeraSuppressionFire, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-ChimeraSuppressionFire, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-ChimeraSuppressionFire, NodeType=Condition)

+Behaviors=(BehaviorName=SelectTargetForMECSuppression, NodeType=Sequence, Child[0]=SetTargetStack-ChimeraSuppressionFire, Child[1]=PinDownSelectBestTarget, Child[2]=HasValidTarget-ChimeraSuppressionFire)

; Dont Pin Down alone.
-Behaviors=(BehaviorName=PinDownIfAvailable, NodeType=Sequence, Child[0]=IsAbilityAvailable-PinDown, Child[1]=SelectTargetForPinDown, Child[2]=SelectAbility-PinDown)
+Behaviors=(BehaviorName=PinDownIfAvailable, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=IsAbilityAvailable-PinDown, Child[2]=SelectTargetForPinDown, Child[3]=SelectAbility-PinDown)

+Behaviors=(BehaviorName=SelectNCMove_JobOrFanatic50, NodeType=RandFilter, Child[0]=SelectNCMove_JobOrFanatic, Param[0]=50)
; Dont Pin Down a target you are flanking. That's dumb.
-Behaviors=(BehaviorName=PinDownSelectBestTarget, NodeType=RepeatUntilFail, Child[0]=GenericEvaluateTarget)
+Behaviors=(BehaviorName=PinDownSelectBestTarget, NodeType=RepeatUntilFail, Child[0]=GenericEvaluateTargetPinDown)
+Behaviors=(BehaviorName=GenericEvaluateTargetPinDown, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=IsUnFlankedTarget, Child[2]=GenericTargetEvaluations, Child[3]=UpdateBestTarget)

; Don't always open with Micro Missiles, mix it up.
-Behaviors=(BehaviorName=TryMicroMissiles, NodeType=Sequence, Child[0]=IsAbilityAvailable-MicroMissiles, Child[1]=FindPotentialAoETargets-MicroMissilesProfile, Child[2]=SelectAoETarget-MicroMissilesProfile, Child[3]=SelectAbility-MicroMissiles)

+Behaviors=(BehaviorName=TryMicroMissiles, NodeType=RandFilter, Child[0]=DoMicroMissiles, Param[0]=50)
+Behaviors=(BehaviorName=DoMicroMissiles, NodeType=Sequence, Child[0]=IsAbilityAvailable-MicroMissiles, Child[1]=FindPotentialAoETargets-MicroMissilesProfile, Child[2]=SelectAoETarget-MicroMissilesProfile, Child[3]=SelectAbility-MicroMissiles)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; TURRET
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=SacredCoilTurretRedAbilitySelector, NodeType=Selector, \\
	Child[0]=MimicBeaconBehavior, \\
	Child[1]=SacredCoilTurretRedFirstActionSelector, \\
	Child[2]=SacredCoilTurret_TryShootOrReloadOrOverwatch)

-Behaviors=(BehaviorName=SacredCoilTurretRedFirstActionSelector, NodeType=Sequence, \\
	Child[0]=NotLastActionPoint, \\
	Child[1]=TryTargetingSystem)

; ***********************************************************************************************************
+Behaviors=(BehaviorName=SacredCoilTurretRedAbilitySelector, NodeType=Selector, \\
	Child[0]=TryTargetingSystem, \\
   Child[1]=NeedsReload, \\
	Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=TryShootOrReload, \\
	Child[4]=TryAnyOverwatch, \\
   Child[5]=ShootAnything)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; COMMANDO
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=Commando_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=FanaticAdvanceToContact_20, \\
	Child[1]=ShootIfVeryGood, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=TryMoveForCommandoThrowSmokeGrenade, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=NeedsReload, \\
	Child[6]=AdvanceToContact, \\
	Child[7]=Commando_RedLastActionSelector)

-Behaviors=(BehaviorName=Commando_RedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryCommandoThrowSmokeGrenade, \\
	Child[1]=TryCommandoCallForReinforcements, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=AdvanceToContact, \\
	Child[4]=SelectMove_JobOrDefensive, \\
	Child[5]=SkipMove)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=Commando_RedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryCommandoCallForReinforcements, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=TryMoveForCommandoThrowSmokeGrenade, \\
	Child[4]=TryCommandoThrowSmokeGrenade, \\
	Child[5]=MoveDefensiveWithLoS50, \\
	Child[6]=TryShootOrReload, \\
	Child[7]=SelectMoveStandard, \\
	Child[8]=HuntEnemyWithCover, \\
   Child[9]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Commando_RedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
	Child[1]=TryCommandoCallForReinforcements, \\
	Child[2]=TryCommandoThrowSmokeGrenade, \\
	Child[3]=ConsiderOverwatchIfSupported, \\
	Child[4]=TryShootOrReload, \\
	Child[5]=TryAnyOverwatchOrCower, \\
	Child[6]=DoIfFlankedMove, \\
	Child[7]=SelectMoveStandard, \\
	Child[8]=HuntEnemyWithCover, \\
   Child[9]=FailsafeLastActionSelector)

-Behaviors=(BehaviorName=TryCommandoCallForReinforcements, NodeType=Sequence, Child[0]=IsAbilityAvailable-CommandoCallForReinforcements, Child[1]=ChanceToCallReinforcements)
+Behaviors=(BehaviorName=TryCommandoCallForReinforcements, NodeType=Sequence, Child[0]=NotInDangerousArea, Child[1]=IsAbilityAvailable-CommandoCallForReinforcements, Child[2]=NoAlliesVisible, Child[3]=HasWounds, Child[4]=SelectAbility-CommandoCallForReinforcements)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; MUTON PRAETORIAN
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************

-Behaviors=(BehaviorName="Muton_Praetorian::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryDuel, \\
	Child[1]=TryMeleeStrike, \\
	Child[2]=TryWarCry, \\
	Child[3]=TryMoveTowardPraetorianTarget, \\
	Child[4]=NeedsReload, \\
	Child[5]=TryPraetorianShot, \\
	Child[6]=DoCower )

-Behaviors=(BehaviorName="Muton_Praetorian::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryDuel, \\
	Child[2]=TryMeleeStrike, \\
	Child[3]=NeedsReload, \\
	Child[4]=TryPraetorianShot, \\
	Child[5]=DoCower, \\
	Child[6]=SkipMove )

; ***********************************************************************************************************

+Behaviors=(BehaviorName="Muton_Praetorian::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryWarCryMany, \\
	Child[1]=TryDuel, \\
	Child[2]=TryMeleeStrike, \\
	Child[3]=TryMoveTowardPraetorianTarget50, \\
   Child[4]=TryGPGrenadeFirstActionNotFlanked, \\
	Child[5]=NeedsReload, \\
	Child[6]=TryDuelShoot, \\
	Child[7]=TryWarCry, \\
	Child[8]=StandardMeleeAttack, \\
	Child[9]=ShootFlankedIn8Tiles, \\
   Child[10]=TryGrenade, \\
	Child[11]=TryMoveTowardPraetorianTarget, \\
	Child[12]=FanaticAdvanceToContact, \\
	Child[13]=HuntEnemyWithCover, \\
   Child[14]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="Muton_Praetorian::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryDuelMeleeStrike, \\
   Child[2]=TryGPPlasmaGrenadeMany, \\
	Child[3]=TryWarCryMany, \\
	Child[4]=TryDuel, \\
	Child[5]=NeedsReload, \\
	Child[6]=TryDuelShoot, \\
	Child[7]=TryWarCry, \\
	Child[8]=StandardMeleeAttack, \\
   Child[9]=TryGPPlasmaGrenadeFew, \\
	Child[10]=ShootFlankedIn8Tiles, \\
	Child[11]=TryMoveTowardPraetorianTargetLowEnemyCount, \\
	Child[12]=TryShootOrReloadOrOverwatch, \\
	Child[13]=FanaticAdvanceToContact, \\
	Child[14]=HuntEnemyWithCover, \\
   Child[15]=FailsafeLastActionSelector)

; The Praetorian is eligible for DarkEventAbility_PlasmaGrenades, added support for it. It's also the GP Leader root.

; Easier if they are just called "Duel" because they exclude other targets.
+Behaviors=(BehaviorName=TryWarCryMany, NodeType=Sequence, Child[0]=IsAbilityAvailable-WarCry, Child[1]=ManyAlliesVisible, Child[2]=SelectAbility-WarCry)
+Behaviors=(BehaviorName=TryMoveTowardPraetorianTarget50, NodeType=RandFilter, Child[0]=TryMoveTowardPraetorianTarget, Param[0]=50)
+Behaviors=(BehaviorName=TryDuelMeleeStrike, NodeType=Sequence, Child[0]=IsInDuel, Child[1]=IsAbilityAvailable-MeleeStrike, Child[2]=SelectTargetForMeleeStrike, Child[3]=SelectAbility-MeleeStrike)
+Behaviors=(BehaviorName=TryDuelShoot, NodeType=Selector, Child[0]=TryPraetorianShot)
; Special case. The Praetorian is allowed to double move IF the enemy count is low AND the ally count is 1 or more.
+Behaviors=(BehaviorName=TryMoveTowardPraetorianTargetLowEnemyCount, NodeType=Sequence, Child[0]=LowEnemiesVisibleCount, Child[1]=AnyAlliesVisible, Child[2]=TryMoveTowardPraetorianTarget)
+Behaviors=(BehaviorName=LowEnemiesVisibleCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<", Param[2]=3)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; ADDER
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="Adder::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryQuickBite, \\
	Child[1]=DoIfFlankedMove, \\
	Child[2]=SelectMove_JobOrAggressive, \\
	Child[3]=TryShootOrReload, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SkipMove)

-Behaviors=(BehaviorName="Adder::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryQuickBite, \\
	Child[2]=TryShootOrReload, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMove_JobOrAggressive, \\
	Child[5]=SkipMove)

; ***********************************************************************************************************

+Behaviors=(BehaviorName="Adder::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=TryQuickBite33, \\
	Child[1]=DoIfFlankedMove, \\
   Child[2]=TryGPPlasmaGrenadeMany, \\
	Child[3]=ShootFlankedIn8Tiles, \\
   Child[4]=TryGPPlasmaGrenadeFew, \\
	Child[5]=SelectMove_JobOrFlanking33, \\
	Child[6]=TryShootOrReload, \\
	Child[7]=SelectMove_JobOrFlanking, \\
	Child[8]=TryAnyOverwatchOrCower, \\
	Child[9]=HuntEnemyWithCover, \\
   Child[10]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="Adder::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=ShootFlankedIn8Tiles, \\
   Child[2]=TryGPPlasmaGrenadeMany, \\
	Child[3]=TryQuickBite33, \\
   Child[4]=TryGPPlasmaGrenadeFew, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=TryAnyOverwatchOrCower, \\
	Child[7]=TryQuickBite, \\
	Child[8]=HuntEnemyWithCover, \\
   Child[9]=FailsafeLastActionSelector)

; Already tried to move with bite, less movement here.
+Behaviors=(BehaviorName=SelectMove_JobOrFlanking33, NodeType=RandFilter, Child[0]=SelectMove_JobOrFlanking, Param[0]=33)
+Behaviors=(BehaviorName=TryQuickBite33, NodeType=RandFilter, Child[0]=TryQuickBite, Param[0]=33)
; Looks too weird to move then come back and melee.
-Behaviors=(BehaviorName=TryQuickBite, NodeType=Sequence, Child[0]=IsAbilityReady-QuickBite, Child[1]=QuickBiteStepSelector)
+Behaviors=(BehaviorName=TryQuickBite, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=IsAbilityReady-QuickBite, Child[2]=QuickBiteStepSelector)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; COBRA
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************

-Behaviors=(BehaviorName=CobraRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=FanaticAdvanceToContact_20, \\
	Child[1]=TryMoveThenPoisonSpit, \\
	Child[2]=TryRootingPoison, \\
	Child[3]=AdvanceToContact, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=CobraRedLastActionSelector)

-Behaviors=(BehaviorName=CobraRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryPoisonSpit, \\
	Child[1]=TryRootingPoison, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=AdvanceToContact, \\
	Child[5]=SelectMoveStandard)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=CobraRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryRootingPoisonIfSupported33, \\
	Child[1]=TryPoisonSpit33, \\
	Child[2]=ShootFlankedIn8Tiles, \\
   Child[3]=TryGrenade, \\
   Child[4]=NeedsReloadNotFlanked, \\
	Child[5]=SelectMove_JobOrFlanking33, \\
	Child[6]=TryRootingPoisonIfSupported33, \\
	Child[7]=TryPoisonSpit33, \\
	Child[8]=SelectMove_JobOrFlanking, \\
   Child[9]=TryPoisonSpit, \\
   Child[10]=TryRootingPoison, \\
   Child[11]=HuntEnemyWithCover, \\
   Child[12]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=CobraRedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
   Child[1]=ShootFlankedIn8Tiles, \\
   Child[2]=TryGrenade, \\
	Child[3]=TryPoisonSpit25, \\
	Child[4]=TryRootingPoisonIfSupported25, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=TryAnyOverwatchOrCower, \\
	Child[7]=HuntEnemyWithCover, \\
	Child[8]=TryPoisonSpit, \\
	Child[9]=TryRootingPoison, \\
   Child[10]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=TryRootingPoison33, NodeType=RandFilter, Child[0]=TryRootingPoison, Param[0]=33)
+Behaviors=(BehaviorName=TryPoisonSpit33, NodeType=RandFilter, Child[0]=TryPoisonSpit, Param[0]=33)
+Behaviors=(BehaviorName=TryRootingPoison25, NodeType=RandFilter, Child[0]=TryRootingPoison, Param[0]=25)
+Behaviors=(BehaviorName=TryPoisonSpit25, NodeType=RandFilter, Child[0]=TryPoisonSpit, Param[0]=25)

+Behaviors=(BehaviorName=TryRootingPoisonIfSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=CobraLowLivingEnemiesVisible, Child[2]=TryRootingPoison)
+Behaviors=(BehaviorName=TryRootingPoisonIfSupported33, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=CobraLowLivingEnemiesVisible, Child[2]=TryRootingPoison33)
+Behaviors=(BehaviorName=TryRootingPoisonIfSupported25, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=CobraLowLivingEnemiesVisible, Child[2]=TryRootingPoison25)

+Behaviors=(BehaviorName=CobraLowLivingEnemiesVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<", Param[2]=2)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; PYTHON (BY DEDUCTION, THERE ARE NO OTHER VIPERS IN DEFAULT.AI WITH WORKING BIND MECHANICS)
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=ViperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=ConsiderTonguePullPriorityOrMelee, \\
	Child[1]=FlankedMoveSelector, \\
	Child[2]=TryGetOverHere, \\
	Child[3]=TryMoveThenPoisonSpit, \\
	Child[4]=TryMoveThenPoisonSpitSingle, \\
	Child[5]=SelectMoveStandard, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=ViperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryPoisonSpit, \\
	Child[2]=TryGetOverHere, \\
	Child[3]=TryPoisonSpitSingle, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=DoIfFlankedMove, \\
	Child[6]=HuntEnemyWithCover, \\
	Child[7]=SelectMoveStandard)

; ***********************************************************************************************************
+Behaviors=(BehaviorName=ViperRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=TryPythonBindSupported, \\
   Child[1]=ShootFlankedIn8Tiles, \\
   Child[2]=TryGPPlasmaGrenadeMany, \\
   Child[3]=TryGetOverHereHasAmmo, \\
   Child[4]=TryBindLoneEnemy, \\
   Child[5]=TryGPPlasmaGrenadeFew, \\
   Child[6]=NeedsReloadNotFlanked, \\
	Child[7]=SelectUnsafeMove_JobOrMeleeIfBindReady, \\
	Child[8]=ShootIfIdeal, \\
	Child[9]=AdvanceToContact_10, \\
   Child[10]=MoveAdvanceToCoverLoSUnsafe, \\
	Child[11]=HuntEnemyWithCover, \\
   Child[12]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=ViperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
   Child[1]=TryPythonBindSupported, \\
   Child[2]=ShootFlankedIn8Tiles, \\
   Child[3]=TryGPPlasmaGrenadeMany, \\
   Child[4]=TryBindLoneEnemy, \\
   Child[5]=DoIfFlankedMoveIfNotMoved, \\
   Child[6]=TryGPPlasmaGrenadeFew, \\
   Child[7]=NeedsReloadNotFlanked, \\
	Child[8]=ConsiderOverwatchIfSupported, \\
   Child[9]=TryShootOrReloadOrOverwatch, \\
	Child[10]=TryAnyOverwatchOrCower, \\
   Child[11]=TryStandardMelee, \\
   Child[12]=AdvanceToContact, \\
   Child[13]=MoveAdvanceToCoverLoSUnsafe, \\
	Child[14]=HuntEnemyWithCover, \\
   Child[15]=FailsafeLastActionSelector)

; Bind Ending behaviors shouldnt be required because the Python wont bind if its dangerous.
+Behaviors=(BehaviorName=TryPythonBindSupported, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=PythonLowEnemyCount, Child[2]=NotBloodied, Child[3]=TryStandardMelee)
+Behaviors=(BehaviorName=PythonLowEnemyCount, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="<", Param[2]=3)
+Behaviors=(BehaviorName=SelectUnsafeMove_JobOrMeleeIfBindReady, NodeType=Sequence, Child[0]=IsAbilityReady-Bind, Child[1]=SelectUnsafeMove_JobOrMelee)
+Behaviors=(BehaviorName=TryBindLoneEnemy, NodeType=Sequence, Child[0]=PythonLoneEnemyVisible, Child[1]=TryStandardMelee)
+Behaviors=(BehaviorName=TryGetOverHereHasAmmo, NodeType=Sequence, Child[0]=HasAmmo, Child[1]=TryGetOverHere)
+Behaviors=(BehaviorName=NeedsReloadNotFlanked, NodeType=Sequence, Child[0]=NotInDangerousArea, Child[1]=NeedsReload)
+Behaviors=(BehaviorName=WasLastAbility-GetOverHere, NodeType=Condition)
+Behaviors=(BehaviorName=PythonLoneEnemyVisible, NodeType=StatCondition, Param[0]=VisibleEnemyCount, Param[1]="==", Param[2]=1)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; HITMAN
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************

-Behaviors=(BehaviorName="Hitman::AdventRedFirstActionSelector", NodeType=Selector, \\
	Child[0]=FanaticAdvanceToContact_20, \\
	Child[1]=NeedsReload, \\
	Child[2]=MoveBackWithLOSIfFlankedFirstAction, \\
	Child[3]=FlankedMoveSelector_ThenDefensiveOrRandom_50, \\
	Child[4]=TryDisablingShot, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=TryGrenade, \\
	Child[7]=AdvanceToContact, \\
	Child[8]=DoCower )

-Behaviors=(BehaviorName="Hitman::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryDisablingShot, \\
	Child[2]=ShootIfAvailable, \\
	Child[3]=TryGrenade, \\
	Child[4]=AdvanceToContact)

; ***********************************************************************************************************

+Behaviors=(BehaviorName="Hitman::AdventRedFirstActionSelector", NodeType=Selector, \\
   Child[0]=NeedsReloadNotFlanked, \\
	Child[1]=ShootFlankedIn8Tiles, \\
	Child[2]=TryGrenade, \\
	Child[3]=FanaticAdvanceToContact_20, \\
	Child[4]=TryDisablingShot50, \\
	Child[5]=FanaticAdvanceToContact_10, \\
	Child[6]=TryRiotBash33, \\
   Child[7]=ShootIfIdeal, \\
	Child[8]=SelectMove_JobOrFlanking, \\
   Child[9]=FanaticAdvanceToContact, \\
	Child[10]=HuntEnemyWithCover, \\
   Child[11]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName="Hitman::AdventRedLastActionSelector", NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=ShootIfIdeal, \\
	Child[2]=TryGrenade, \\
	Child[3]=ConsiderOverwatchIfSupported, \\
	Child[4]=TryDisablingShot50, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=TryAnyOverwatchOrCower, \\
	Child[7]=TryRiotBash, \\
	Child[8]=HuntEnemyWithCover, \\
   Child[9]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=TryDisablingShot50, NodeType=RandFilter, Child[0]=TryDisablingShot, Param[0]=50)
+Behaviors=(BehaviorName=SelectMove_JobOrHunter50, NodeType=RandFilter, Child[0]=SelectMove_JobOrHunter, Param[0]=50)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; NECROMANCER
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************

-Behaviors=(BehaviorName=Sectoid_NecromancerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=SelectMove_JobOrDefensive, \\
	Child[2]=TryPsiReanimation, \\
	Child[3]=TryCorress, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=Sectoid_NecromancerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
	Child[1]=TryPsiReanimation, \\
	Child[2]=TryCorress, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemyWithCover, \\
	Child[5]=SelectMove_JobOrDefensive)

; ***********************************************************************************************************
; This is the only instance I allow SkipMove. The Necromancer should remain in place if possible and evaluate
; other options.
+Behaviors=(BehaviorName=Sectoid_NecromancerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryCorress, \\
	Child[1]=TryPsiReanimation, \\
	Child[2]=DoIfFlankedMove, \\
   Child[3]=TryGrenade, \\
	Child[4]=MoveDefensiveWithLoS50, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=HuntEnemyWithCover, \\
   Child[7]=MoveDefensiveWithLoS, \\
   Child[8]=SelectMove_JobOrDefensive, \\
	Child[9]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Sectoid_NecromancerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryCorress, \\
	Child[2]=TryPsiReanimation, \\
	Child[3]=DoIfFlankedMoveIfNotMoved, \\
   Child[4]=TryGrenade, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=TryAnyOverwatchOrCower, \\
	Child[7]=HuntEnemyWithCover, \\
   Child[8]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=DoIfFlankedMoveIfNotMoved, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=DoIfFlankedMove)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; BERSERKER
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=BerserkerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=FanaticAdvanceToContact_20, \\
	Child[1]=TryBerserkerMelee, \\
	Child[2]=MoveMeleeDashFANATICUnsafe, \\
	Child[3]=FanaticAdvanceToContact_10, \\
	Child[4]=HuntEnemyUnsafe)

-Behaviors=(BehaviorName=BerserkerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryBerserkerMelee, \\
	Child[1]=MoveMeleeDashFANATICUnsafe, \\
	Child[2]=AdvanceToContact, \\
	Child[3]=HuntEnemyUnsafe)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=BerserkerRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=StandardMeleeAttack, \\
	Child[1]=TryBerserkerMelee, \\
	Child[2]=MoveMeleeDashFANATICUnsafe, \\
	Child[3]=FanaticAdvanceToContact, \\
	Child[4]=TryStandardMeleeUnsafe, \\
   Child[5]=HuntEnemyUnsafe, \\
   Child[6]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=BerserkerRedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
   Child[1]=StandardMeleeAttack, \\
	Child[2]=TryBerserkerMelee, \\
	Child[3]=MoveMeleeDashFANATICUnsafe, \\
	Child[4]=FanaticAdvanceToContact, \\
	Child[5]=TryStandardMeleeUnsafe, \\
   Child[6]=HuntEnemyUnsafe, \\
   Child[7]=FailsafeLastActionSelector)

-Behaviors=(BehaviorName=ScoreClosestEnemyIfInRange, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetIsNotFacelessCivilian, Child[2]=IsTargetInMovementRange-StandardMelee, Child[3]=TargetScoreByScaledDistance-1, Child[4]=AddToTargetScore_100, Child[5]=AvoidBoundAndPanickedTargets)
+Behaviors=(BehaviorName=ScoreClosestEnemyIfInRange, NodeType=Sequence, Child[0]=AllyMCCheckMelee, Child[1]=IsTargetInMovementRange-StandardMelee, Child[2]=TargetScoreByScaledDistance-1, Child[3]=AddToTargetScore_100)

; This will allow Berserkers to attack Mind Controlled allies.
+Behaviors=(BehaviorName=AllyMCCheckMelee, NodeType=Selector, Child[0]=TargetIsMindControlledAllyOK, Child[1]=TargetIsNotAlly)
+Behaviors=(BehaviorName=TargetIsMindControlledAllyOK, NodeType=Sequence, Child[0]=TargetAffectedByEffect-MindControl, Child[1]=TargetisAlly)

+Behaviors=(BehaviorName=TargetIsNotAlly, NodeType=Inverter, Child[0]=TargetIsAlly)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; ARCHON
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=ArchonFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedMoveAndAttack, \\
	Child[1]=TryMoveThenBlazingPinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=DoIfFlankedMove, \\
	Child[4]=SelectMoveStandard, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=ArchonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedAttack, \\
	Child[1]=TryBlazingPinions, \\
	Child[2]=TryStandardMelee, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy, \\
	Child[5]=SelectMoveStandard)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=ArchonFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryFrenziedMoveAndAttack, \\
	Child[1]=TryStandardMelee, \\
   Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=SelectMoveStandard50, \\
	Child[4]=ShootIfIdeal, \\
	Child[5]=NCMoveAggressiveUnsafe, \\
   Child[6]=TryStandardMeleeUnsafe, \\
   Child[7]=TryBlazingPinions, \\
	Child[8]=HuntEnemyUnsafe, \\
   Child[9]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=ArchonRedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
	Child[1]=TryFrenziedAttack, \\
	Child[2]=TryBlazingPinions33, \\
	Child[3]=TryStandardMelee, \\
	Child[4]=TryShootFlanked, \\
	Child[5]=TryAnyOverwatchIfSupported25, \\
	Child[6]=TryShootOrReload, \\
	Child[7]=TryAnyOverwatchNotFrenzied, \\
	Child[8]=NCMoveAggressiveUnsafe, \\
   Child[9]=TryStandardMeleeUnsafe, \\
   Child[10]=TryBlazingPinions, \\
	Child[11]=HuntEnemyUnsafe, \\
   Child[12]=FailsafeLastActionSelector)

+Behaviors=(BehaviorName=IsFrenzied, NodeType=Selector, Child[0]=AffectedByEffect-FrenzyEffect)
+Behaviors=(BehaviorName=TryBlazingPinions33, NodeType=RandFilter, Child[0]=TryBlazingPinions, Param[0]=33)
+Behaviors=(BehaviorName=NotFrenzied, NodeType=Inverter, Child[0]=IsFrenzied)
+Behaviors=(BehaviorName=TryAnyOverwatchNotFrenzied, NodeType=Sequence, Child[0]=NotFrenzied, Child[1]=TryAnyOverwatch)

; Dont pinion alone how retarded
-Behaviors=(BehaviorName=TryBlazingPinions, NodeType=Sequence, Child[0]=IsAbilityAvailable-BlazingPinionsStage1, Child[1]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[2]=SelectAoETarget-BlazingPinionsBasicProfile, Child[3]=SelectAbility-BlazingPinionsStage1)
+Behaviors=(BehaviorName=TryBlazingPinions, NodeType=Sequence, Child[0]=AnyAlliesVisible, Child[1]=IsAbilityAvailable-BlazingPinionsStage1, Child[2]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[3]=SelectAoETarget-BlazingPinionsBasicProfile, Child[4]=SelectAbility-BlazingPinionsStage1)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; ANDROMEDON
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=AndromedonRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryMoveThenAcidBlob, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=SelectMoveStandard, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=AndromedonRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryAcidBlob_75, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMoveStandard)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=AndromedonRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=DoIfFlankedMove, \\
   Child[1]=ShootFlankedIn8Tiles, \\
	Child[2]=TryAcidBlob, \\
	Child[3]=TryStandardMelee20, \\
   Child[4]=ShootIfIdeal, \\
	Child[5]=SelectMove_JobOrAggressive, \\
	Child[6]=TryShootOrReloadOrOverwatch, \\
	Child[7]=HuntEnemyWithCover, \\
   Child[8]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=AndromedonRedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
	Child[1]=StandardMeleeAttack, \\
   Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=TryAcidBlob, \\
   Child[4]=ShootIfIdeal, \\
	Child[5]=ConsiderOverwatchIfSupported, \\
	Child[6]=TryShootOrReload, \\
	Child[7]=TryAnyOverwatchOrCower, \\
	Child[8]=HuntEnemyWithCover, \\
   Child[9]=FailsafeLastActionSelector)

; This includes moving to melee range as action 1.
+Behaviors=(BehaviorName=TryStandardMelee20, NodeType=RandFilter, Child[0]=TryStandardMelee, Param[0]=20)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; CHRYSSALID IS A MESS AND LOOKS OK IN GAME, DONT TOUCH EXCEPT NEONATES
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************

; Prevent Neonates from acting on the same turn they spawn. They can move however.
-Behaviors=(BehaviorName=ChryssalidRoot, NodeType=Selector, Child[0]=ChryssalidHeatSeekProtocol, Child[1]=SkipIfBurrowed, Child[2]=TryJobTerrorist, Child[3]=TryJobChargerUnsafe, Child[4]=ChryssalidGreenAlert, Child[5]=ChryssalidRedAlert, Child[6]=ChryssalidYellowAlert)
+Behaviors=(BehaviorName=ChryssalidRoot, NodeType=Selector, Child[0]=TryUnBurrow, Child[1]=ChryssalidJustSpawnedThisTurn, Child[2]=TryJobUnsafe, Child[3]=ChryssalidNewRedAlert, Child[4]=GenericAlertHandler)
+Behaviors=(BehaviorName=ChryssalidJustSpawnedThisTurn, NodeType=Sequence, Child[0]=JustSpawnedThisTurn, Child[1]=MoveMeleeDashFANATICUnsafe)

+Behaviors=(BehaviorName=ChryssalidNewRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=NewChryssalidAbilitySelector)
+Behaviors=(BehaviorName=NewChryssalidAbilitySelector, NodeType=Selector, Child[0]=NewChryssalidRedFirstAction, Child[1]=NewChryssalidRedLastAction)

+Behaviors=(BehaviorName=NewChryssalidRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=NewChryssalidRedFirstActionSelector)
+Behaviors=(BehaviorName=NewChryssalidRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=TryMeleeOnCivilian, \\
   Child[1]=TryStandardMeleeDashFANATICUnsafe, \\
   Child[2]=MoveMeleeFANATICUnsafe, \\
	Child[3]=FanaticAdvanceToContact, \\
   Child[4]=TryStandardMeleeUnsafe, \\
   Child[5]=HuntEnemyUnsafe, \\
   Child[6]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=NewChryssalidRedLastAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=NewChryssalidRedLastActionSelector)
+Behaviors=(BehaviorName=NewChryssalidRedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
   Child[1]=TryMeleeOnCivilian, \\
   Child[2]=TryStandardMeleeDashFANATICUnsafe, \\
   Child[3]=TryStandardMeleeUnsafe, \\
	Child[4]=FanaticAdvanceToContact, \\
   Child[5]=HuntEnemyUnsafe, \\
   Child[6]=FailsafeLastActionSelector)

; Hurt Chryssalids will not attack civilians if they see enemies. Neonates cannot attack civilians outside of Job assignations (for example, killing the VIP is allowed).
-Behaviors=(BehaviorName=TryMeleeOnCivilian, NodeType=Sequence, Child[0]=NumKilledCiviliansIsLessThanTurnCount, Child[1]=HasVisibleCivilianInMoveRange, Child[2]=Rand50AttackCivilian)
+Behaviors=(BehaviorName=TryMeleeOnCivilian, NodeType=Sequence, Child[0]=NotNeonateChryssalid, Child[1]=NumKilledCiviliansIsLessThanTurnCount, Child[2]=HasVisibleCivilianInMoveRange, Child[3]=ChryssalidCheckNotDamaged, Child[4]=NotJustSpawnedThisTurn, Child[5]=NotFirstCombatTurn, Child[6]=Rand50AttackCivilian)

+Behaviors=(BehaviorName=ChryssalidNoWounds, NodeType=StatCondition, Param[0]=eStat_HP, Param[1]="==", Param[2]="100%")
+Behaviors=(BehaviorName=ChryssalidCheckNotDamaged, NodeType=Sequence, Child[0]=ChryssalidNoWounds, Child[1]=NoVisibleEnemies)

+Behaviors=(BehaviorName=TemplateNameIs-NeonateChryssalid, NodeType=Condition)
+Behaviors=(BehaviorName=NotNeonateChryssalid, NodeType=Inverter, Child[0]=TemplateNameIs-NeonateChryssalid)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; FACELESS
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=FacelessFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryScythingClaws, \\
	Child[1]=MoveMeleeFANATICUnsafe, \\
	Child[2]=FanaticAdvanceToContact, \\
	Child[3]=HuntEnemyUnsafe)

-Behaviors=(BehaviorName=FacelessRedLastAction, NodeType=Selector, \\
	Child[0]=TryScythingClaws, \\
	Child[1]=MoveMeleeFANATICUnsafe, \\
	Child[2]=FanaticAdvanceToContact, \\
	Child[3]=HuntEnemyUnsafe)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=FacelessFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryScythingClaws, \\
	Child[1]=MoveMeleeFANATICUnsafe, \\
	Child[2]=FanaticAdvanceToContact, \\
	Child[3]=HuntEnemyUnsafe, \\
   Child[4]=TryStandardMeleeUnsafe)

+Behaviors=(BehaviorName=FacelessRedLastAction, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
	Child[1]=TryScythingClaws, \\
	Child[2]=MoveMeleeFANATICUnsafe, \\
	Child[3]=FanaticAdvanceToContact, \\
	Child[4]=HuntEnemyUnsafe, \\
   Child[5]=TryStandardMeleeUnsafe)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; SECTOPOD
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=SectopodFirstActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=TryLightningField, \\
	Child[3]=TryFirstMoveTowardVisibleEnemies50, \\
	Child[4]=ShootIfAvailable, \\
	Child[5]=TryWrathCannonS166, \\
	Child[6]=TryMoveForLightningField, \\
	Child[7]=MoveNoCover, \\
	Child[8]=TryShootOrReloadOrOverwatch, \\
	Child[9]=HuntEnemy)

-Behaviors=(BehaviorName=SectopodSecondActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryStandUp,\\
	Child[2]=TryLightningField, \\
	Child[3]=TryMoveTowardVisibleEnemies50, \\
	Child[4]=TryWrathCannonS166, \\
	Child[5]=TryMoveForLightningField, \\
	Child[6]=MoveNoCoverIfNotMoved, \\
	Child[7]=TryShootOrReloadOrOverwatch, \\
	Child[8]=HuntEnemy)

-Behaviors=(BehaviorName=SectopodRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryWrathCannonS1, \\
	Child[2]=TryLightningField, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy)

; ***********************************************************************************************************

+Behaviors=(BehaviorName=SectopodFirstActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryLightningField, \\
	Child[2]=NeedsReload, \\
	Child[3]=TryStandUp,\\
   Child[4]=ShootFlankedIn8Tiles, \\
	Child[5]=MoveNoCoverUnsafe50, \\
   Child[6]=ShootIfIdeal, \\
	Child[7]=TryMoveForLightningField, \\
	Child[8]=MoveNoCoverUnsafe, \\
	Child[9]=ShootIfAvailable, \\
   Child[10]=FanaticAdvanceToContact_20, \\
	Child[11]=HuntEnemyUnsafe)

+Behaviors=(BehaviorName=SectopodSecondActionSelector, NodeType=Selector,\\
	Child[0]=SectopodCannonCharging, \\
	Child[1]=TryLightningField, \\
   Child[2]=NeedsReload, \\
   Child[3]=ShootFlankedIn8Tiles, \\
	Child[4]=TryMoveForLightningField, \\
   Child[5]=ShootIfIdeal, \\
	Child[6]=MoveNoCoverIfNotMoved50, \\
	Child[7]=ShootIfAvailable, \\
   Child[8]=FanaticAdvanceToContact_10, \\
	Child[9]=HuntEnemyUnsafe)

+Behaviors=(BehaviorName=SectopodRedLastActionSelector, NodeType=Selector, \\
	Child[0]=SectopodCannonCharging, \\
   Child[1]=GrantedActionsHandler, \\
	Child[2]=TryWrathCannonS1, \\
	Child[3]=TryLightningField, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=TryAnyOverwatch, \\
   Child[6]=FanaticAdvanceToContact, \\
	Child[7]=HuntEnemyUnsafe)

+Behaviors=(BehaviorName=MoveNoCoverIfNotMoved50, NodeType=RandFilter, Child[0]=MoveNoCoverIfNotMoved, Param[0]=50)
+Behaviors=(BehaviorName=MoveNoCoverUnsafe50, NodeType=RandFilter, Child[0]=MoveNoCoverUnsafe, Param[0]=50)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; GATEKEEPER
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName=GateKeeperRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenAnimaInversionCorpse, \\
	Child[1]=TryMoveThenAnimaInversionMixed, \\
	Child[2]=TryAnimaConsumeOnEnemy, \\
	Child[3]=TryAnimaConsumeOnAlly, \\
	Child[4]=MoveNoCover, \\
	Child[5]=ShootIfAvailable, \\
	Child[6]=HuntEnemy)

-Behaviors=(BehaviorName=GateKeeperRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryAnimaInversionCorpses, \\
	Child[1]=TryAnimaInversionMixed, \\
	Child[2]=TryAnimaConsumeOnEnemy, \\
	Child[3]=TryAnimaConsumeOnAlly, \\
	Child[4]=GateKeeperOpenOrClose, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=MoveNoCover, \\
	Child[7]=HuntEnemy)

; ***********************************************************************************************************
+Behaviors=(BehaviorName=GateKeeperRedFirstActionSelector, NodeType=Selector, \\
   Child[0]=GatekeeperSpawnCheck, \\
	Child[1]=TryAnimaConsumeOnEnemy, \\
	Child[2]=TryMoveThenAnimaInversionMixed, \\
	Child[3]=TryMoveThenAnimaInversionCorpse, \\
	Child[4]=MoveNoCoverUnsafe50, \\
	Child[5]=TryShootOrReload, \\
	Child[6]=MoveNoCoverUnsafe, \\
	Child[7]=HuntEnemyUnsafe)

+Behaviors=(BehaviorName=GateKeeperRedLastActionSelector, NodeType=Selector, \\
   Child[0]=GatekeeperSpawnCheck, \\
   Child[1]=GrantedActionsHandler, \\
	Child[2]=TryAnimaConsumeOnEnemy, \\
	Child[3]=TryAnimaInversionMixed, \\
	Child[4]=TryAnimaInversionCorpses, \\
	Child[5]=GateKeeperOpenOrClose, \\
	Child[6]=TryShootOrReload, \\
	Child[7]=MoveNoCoverUnsafe, \\
	Child[8]=TryAnyOverwatch, \\
	Child[9]=HuntEnemyUnsafe)

-Behaviors=(BehaviorName=GateKeeperOpenOrClose, NodeType=Selector, Child[0]=CloseIfInObviousDanger, Child[1]=DoIfFlankedMove, Child[2]=GateKeeperCheckOpen)
+Behaviors=(BehaviorName=GateKeeperOpenOrClose, NodeType=Selector, Child[0]=CloseIfInObviousDanger, Child[1]=GateKeeperCheckOpen)
+Behaviors=(BehaviorName=GatekeeperSpawnCheck, NodeType=Selector, Child[0]=IsInFirstCombatTurn, Child[1]=JustSpawnedThisTurn)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; MUTON BRUTE
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************

-Behaviors=(BehaviorName=Muton_EnforcerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=NeedsReload, \\
	Child[1]=TryDevastatingBlow, \\
	Child[2]=TryBayonet, \\
	Child[3]=TryMoveThenGrenade, \\
	Child[4]=TryMoveToSuppressClosest, \\
	Child[5]=TryTwoTurnAttackSupportIfSafe, \\
	Child[6]=SelectMoveProfileByJob, \\
	Child[7]=ShootIfIdeal, \\
	Child[8]=HuntEnemyWithCover)

-Behaviors=(BehaviorName=Muton_EnforcerRedLastActionSelector, NodeType=Selector, \\
	Child[0]=GrantedActionsHandler, \\
	Child[1]=TryBayonet, \\
	Child[2]=TryDevastatingBlow, \\
	Child[3]=TryGrenade, \\
	Child[4]=ShootIfIdeal, \\
	Child[5]=TrySuppressClosest, \\
	Child[6]=HuntEnemyWithCoverThenBladestorm, \\
	Child[7]=SelectMove_JobOrAggressive, \\
	Child[8]=TryBladestormOverwatch) 

; ***********************************************************************************************************
+Behaviors=(BehaviorName=Muton_EnforcerRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryMoveThenGrenade, \\
	Child[1]=TryDevastatingBlow50, \\
	Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=TryDevastatingBlow, \\
	Child[4]=SelectMove_JobOrAggressive50, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=SelectMove_JobOrAggressive, \\
	Child[7]=HuntEnemyWithCover, \\
   Child[8]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Muton_EnforcerRedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
   Child[1]=BladestormCheck, \\
	Child[2]=TryGrenade, \\
	Child[3]=TryDevastatingBlow, \\
	Child[4]=ShootFlankedIn8Tiles, \\
	Child[5]=TryShootOrReloadOrOverwatch, \\
	Child[6]=HuntEnemyWithCoverThenBladestorm, \\
	Child[7]=TryAnyOverwatchOrBladestorm, \\
   Child[8]=TryBladestormOverwatch, \\
   Child[9]=FailsafeLastActionSelector)

; Bladestorm Overwatch should be used when possible when it's appropriate, like after moving or during Overwatch checks. Never as a first action.
+Behaviors=(BehaviorName=TryDevastatingBlow50, NodeType=RandFilter, Child[0]=TryDevastatingBlow, Param[0]=50)
+Behaviors=(BehaviorName=TryAnyOverwatchOrBladestorm, NodeType=Selector, Child[0]=TryAnyOverwatch, Child[1]=TryBladestormOverwatch)
+Behaviors=(BehaviorName=SelectMove_JobOrAggressive50, NodeType=RandFilter, Child[0]=SelectMove_JobOrAggressive, Param[0]=50)

; Bladestorm Overwatch selector
+Behaviors=(BehaviorName=AffectedByEffect-KillZoneSource, NodeType=Condition)
; This selector will prevent unit from moving to cancel its Bladestorm.
+Behaviors=(BehaviorName=BladestormCheck, NodeType=Sequence, Child[0]=AffectedByEffect-KillZoneSource, Child[1]=BladestormActiveActionSelector)
+Behaviors=(BehaviorName=BladestormActiveActionSelector, NodeType=Selector, \\
	Child[0]=TryGrenade, \\
	Child[1]=TryStandardMelee, \\
	Child[2]=ShootFlankedIn8Tiles, \\
	Child[3]=TryShootOrReload, \\
   Child[4]=ShootAnything, \\
   Child[5]=SkipMove)

; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
; PURIFIER CONVERSION TO 2 ACTIONS
; ***********************************************************************************************************
; ***********************************************************************************************************
; ***********************************************************************************************************
-Behaviors=(BehaviorName="AdventPurifier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=PurifierRedAlert, Child[3]=GenericAlertHandler, Child[4]=SkipMove)
-Behaviors=(BehaviorName="AdventPurifier::AttackMimicBeacon", NodeType=Sequence, Child[0]=SelectPotentialMimicBeaconTarget, Child[1]=TryFlameThrowerOnMimicBeacon)
-Behaviors=(BehaviorName=PurifierRedAlert, NodeType=Sequence, Child[0]=IsRedOrOrangeAlert, Child[1]=SelectPurifierAbility)
-Behaviors=(BehaviorName=SelectPurifierAbility, NodeType=Selector,\\
			Child[0]=SelectPreselectedAbility, \\
			Child[1]=MimicBeaconBehavior, \\
			Child[2]=FanaticAdvanceToContact_20, \\
			Child[3]=FlameThrowerPriorityOption, \\
			Child[4]=TryMoveThenGrenade, \\
			Child[5]=TryMoveThenFlameThrower, \\
			Child[6]=TryFlankedMoveThenFlameThrower,\\
			Child[7]=DoIfFlankedMove, \\
			Child[8]=TryShootOrReloadOrOverwatch, \\
			Child[9]=AdvanceToContact, \\
			Child[10]=FanaticAdvanceToContact, \\
			Child[11]=HuntEnemyWithCover)

; ***********************************************************************************************************
+Behaviors=(BehaviorName="AdventPurifier::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=Purifier_RedAlert, Child[2]=GenericAlertHandler)
+Behaviors=(BehaviorName=Purifier_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=Purifier_RedAbilitySelector)
+Behaviors=(BehaviorName=Purifier_RedAbilitySelector, NodeType=Selector, Child[0]=Purifier_RedFirstAction, Child[1]=Purifier_RedLastAction)
+Behaviors=(BehaviorName=Purifier_RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=Purifier_RedFirstActionSelector)
+Behaviors=(BehaviorName=Purifier_RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=Purifier_RedLastActionSelector)

+Behaviors=(BehaviorName=Purifier_RedFirstActionSelector, NodeType=Selector, \\
   Child[0]=FlameThrowerPriorityOption, \\
   Child[1]=TryGrenade, \\
   Child[2]=TryFlankedMoveThenFlameThrower,\\
   Child[3]=TryMoveThenFlameThrower, \\
   Child[4]=FanaticAdvanceToContact_5, \\
   Child[5]=HuntEnemyWithCover, \\
   Child[6]=FailsafeFirstActionSelector)

+Behaviors=(BehaviorName=Purifier_RedLastActionSelector, NodeType=Selector, \\
   Child[0]=GrantedActionsHandler, \\
   Child[1]=FlamethrowerOrGrenade, \\
   Child[2]=FlameThrowerPriorityOption, \\
   Child[3]=TryFlameThrower, \\
   Child[4]=TryGrenade, \\
   Child[5]=LastMoveTryFlameAnything, \\
   Child[6]=HuntEnemyWithCover, \\
   Child[7]=DoDelayTurn, \\
   Child[8]=TryFlamethrowerStockButt50, \\
   Child[9]=DoCower, \\
   Child[10]=FlamethrowerStockButt, \\
   Child[11]=MoveAdvanceToCover, \\
   Child[12]=FailsafeLastActionSelector)

; Too many good choices, select randomly from both options.
+Behaviors=(BehaviorName=FlamethrowerOrGrenade, NodeType=RandSelector, Child[0]=FlameThrowerPriorityOption, Child[1]=TryGrenade)

+Behaviors=(BehaviorName=TargetIsInRange-7, NodeType=Action, Param[0]="7"); Distance in Meters, 7 = 5 tiles
+Behaviors=(BehaviorName=TargetIsNotInRange-7, NodeType=Inverter, Child[0]=TargetIsInRange-7)
+Behaviors=(BehaviorName=FanaticAdvanceToContact_5, NodeType=Sequence, Child[0]=SelectClosestPotentialAdvanceToContactTarget, Child[1]=TargetIsNotInRange-7, Child[2]=FanaticMoveTowardAdvanceToContactTarget)

+Behaviors=(BehaviorName=IsAbilityAvailable-Takedown, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Takedown, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Takedown, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-Takedown, NodeType=Condition)

+Behaviors=(BehaviorName=TryFlamethrowerStockButt50, NodeType=RandFilter, Child[0]=FlamethrowerStockButt, Param[0]=50)
+Behaviors=(BehaviorName=FlamethrowerStockButt, NodeType=Sequence, Child[0]=IsAbilityAvailable-Takedown, Child[1]=SelectTargetForStandardMeleeButt, Child[2]=SelectAbility-Takedown)
+Behaviors=(BehaviorName=SelectTargetForStandardMeleeButt, NodeType=Sequence, Child[0]=SetTargetStack-Takedown, Child[1]=SelectBestTargetForStandardMelee, Child[2]=HasValidTarget-Takedown)